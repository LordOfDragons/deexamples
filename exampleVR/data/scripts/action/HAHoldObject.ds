pin Dragengine.Scenery
pin Dragengine.LoadSave


/**
 * Hand action for holding an object in hand.
 */
class HAHoldObject extends BaseVRHandAction implements BAAVRGrab
	/** Action states. */
	enum State
		/** Grab object. Blends from ready grab pose to hold pose. */
		grab
		
		/** Hold object. */
		idle
		
		/** Ungrab object. Blends from hold pose to ready grab pose. */
		ungrab
		
		/** Cool down. Small delay to avoid collision with hand before starting next action. */
		coolDown
	end
	
	
	
	protected var ECBehaviorGrabSpot.Instance grabSpot
	protected var ECBehaviorAttachable.Instance attachable
	
	protected var State state
	protected var float grabTime
	protected var float ungrabTime
	protected var float coolDownTime
	protected var float elapsedTime
	
	protected var Vector dropLinearVelocity
	protected var Vector dropAngularVelocity
	
	protected var AnimatorController controllerInteract
	
	
	
	/** Create action. */
	public func new(ECBehaviorGrabSpot.Instance grabSpot)
		this.grabSpot = grabSpot
		attachable = ECBehaviorAttachable.getInstanceIn(grabSpot.getElement())
		
		state = State.grab
		grabTime = 0.05
		ungrabTime = 0.05
		coolDownTime = 0.1
		elapsedTime = 0
		
		dropLinearVelocity = Vector.new()
		dropAngularVelocity = Vector.new()
	end
	
	
	
	/** Init behaviors. */
	protected func void initBehaviors()
		super.initBehaviors()
	end
	
	
	
	/** Action has been activated. */
	public func void activate(BehaviorElement actor, ECBehaviorVRHand.Instance vrHand)
		super.activate(actor, vrHand)
		
		// Grab object. This marks the object as grabbed by the player but it is not yet
		// attached to the attach slot
		handGrabber.regrab(grabSpot)
	end
	
	/** Set up animator. */
	protected func void initAnimator()
		// Select animator to use while holding object. We use here an animator identifier
		// used while adding animators to the player class. If the animator identifier is
		// not present in the map the animator is set to null like HADefault uses
		// 
		// This is rudimentary here. Usually you will create a behavior for providing
		// information on how to interact with the object while held. You would then have
		// amongst the interaction parameters also a string parameter indicating the
		// animator to use. This can be directly the identifier to use or part of the
		// identfier to create (for example "hold " + object.animatorName)
		if grabSpot.getElement().getClass() castable BallClass
			handAnimated.setActiveAnimatorID("hold ball")
			
		elif grabSpot.getElement().getClass() castable CanClass
			handAnimated.setActiveAnimatorID("hold can")
			
		else
			handAnimated.setActiveAnimatorID("hold ball")
		end
		
		// Get animator controllers if present
		controllerInteract = handAnimated.getControllerNamed("interact")
		
		// If controller grab is present set the controller range to the grab time
		if controllerInteract != null
			controllerInteract.setRange(0, grabTime)
		end
	end
	
	/** Update animator controllers. */
	protected func void updateAnimator(float elapsed)
		select state
		case State.grab
			// Advance elapsed time
			elapsedTime += elapsed
			
			// Set grab controller to elapsed time
			if controllerInteract != null
				controllerInteract.setValue(elapsedTime)
			end
			
			// Pull object towards attach position. This allows to smoothly move the object
			// into the hold position
			var DVector objectPosition = grabSpot.getElement().getPosition()
			var Quaternion objectOrientation = grabSpot.getElement().getOrientation()
			
			var DVector attachPosition = handAttachSlot.getWorldMatrix().getPosition()
			var Quaternion attachOrientation = handAttachSlot.getWorldMatrix().toQuaternion()
			
			var float blendFactor = DEMath.linearStep(elapsedTime, 0, grabTime)
			
			var DVector mixedPosition = objectPosition.mix(attachPosition, blendFactor)
			var Quaternion mixedOrientation = objectOrientation.slerp(attachOrientation, blendFactor)
			
			grabSpot.getElement().setGeometry(mixedPosition, mixedOrientation)
			
			// If elapsed time reaches grab time switch to idle state
			if elapsedTime >= grabTime
				state = State.idle
				
				// Attach object to attach slot. From now on the physics module takes
				// care of moving the object for us
				attachable.reattach(handAttachSlot, Vector.new(), Quaternion.new())
				
				vrHand.getCollider().setEnabled(true)
			end
			
		case State.idle
			// Nothing to be done here. If the animator wants to be updated with elapsed
			// time for idle playback this is done automatically by using locomotion
			// animator update as provided by ECBehaviorActorAnimated. What this does is
			// to update animators with specific names automatically. In this case an
			// animator controller named "idle" will be updated with the elapsed time
			
		case State.ungrab
			// Advance elapsed time but reducing it instead of increasing it
			elapsedTime -= elapsed
			
			// Set grab controller to elapsed time
			if controllerInteract != null
				controllerInteract.setValue(elapsedTime)
			end
			
			// If elapsed time reaches 0 release the object and switch to the default hand action
			if elapsedTime <= 0
				releaseObject()
				
				// Ungrab object. This logically marks the object free again
				handGrabber.release()
				
				// Switch too cool down state. This is used only to avoid collision of the
				// object with the hand for a short time
				elapsedTime = 0
				state = State.coolDown
			end
			
		case State.coolDown
			// Advance elapsed time
			elapsedTime += elapsed
			
			// If elapsed time reaches cool down time switch to grab ready hand action
			if elapsedTime >= coolDownTime
				handAction.setAction(HAReadyGrab.new(true))
			end
		end
	end
	
	/** Release object and set velocity to make it fly away. */
	protected func void releaseObject()
		// Detach the object. From now on the object moves freely again
		attachable.detach()
		
		// Set object velocities
		var Collider collider = grabSpot.getCollider().getCollider()
		
		collider.setLinearVelocity(dropLinearVelocity)
		collider.setAngularVelocity(dropAngularVelocity)
	end
	
	
	
	/** Grab. */
	public func void grab()
	end
	
	/** Ungrab. */
	public func void ungrab()
		if state != State.idle
			return
		end
		
		// Store the drop velocities. We want to use the velocities at the time
		// the player opens his hand not after the ungrab time elapsed
		dropLinearVelocity = vrHand.getLinearVelocity()
		dropAngularVelocity = vrHand.getAngularVelocity()
		
		elapsedTime = ungrabTime
		
		var float speed = dropLinearVelocity.getLength()
		if speed > 0.01
			// Doing a strong throw move with VR gear is between between 2.8 and 4 m/s.
			// A gentle throw move with VR gear is between 1.6 and 2.8 m/s. We use thus
			// a range between 1.5 and 4 m/s as throwing range
			var float speedThrowGentle = 1.5
			var float speedThrowStrong = 4
			
			// Increase speed to make it easier with VR gear to throw objects. The actual
			// multiplier used is quite subjective and also depends on the object mass
			// and other properties. For this example we use 10 m/s as strong throw speed.
			// We use a simple curve to map the real throw speed to the ingame throw speed:
			// 
			//   f(x) = pow(x / 4, 1.5) * 10
			// 
			// Hence the throw speed is first mapped to the range from 0 to 1. Then a curve
			// is applied which has a slightly more than linear part below the gentle throw
			// speed and ramps up steeper towards the strong throw speed. You can use gnuplot
			// to take a look at it:
			// 
			//   plot[x=0:4] ((x/4)**1.5)*10
			var float maxThrowSpeed = 10
			
			speed = DEMath.pow(DEMath.min(speed / speedThrowStrong, 1.0), 1.5) * maxThrowSpeed
			
			// Shorten ungrab time if throwing
			elapsedTime = ungrabTime //DEMath.linearStep(speed, speedThrowGentle, speedThrowStrong, ungrabTime, ungrabTime * 0.1)
			
			// calculate the final linear velocity
			dropLinearVelocity = dropLinearVelocity.normalize() * speed
		end
		
		// If controller grab is present set the controller range to the grab time
		if controllerInteract != null
			controllerInteract.setRange(0, elapsedTime)
		end
		
		// Switch to ungrab state. We decrease elapsed time until 0
		state = State.ungrab
	end
	
	/** Grab in the range from 0 to 1. */
	public func void grabAnalog(float value)
	end
	
	/** Squeeze force in the range from 0 to 1. */
	public func void squeeze(float value)
	end
end
