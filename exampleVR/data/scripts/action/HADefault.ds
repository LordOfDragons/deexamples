pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.LoadSave


/**
 * Default hand action. Used if player is holding nothing in hand nor interacting with any object.
 */
class HADefault extends BaseVRHandAction implements BAAVRGrab
	/**
	 * Factory for loading actor actions. For this Example VR application we do not need
	 * persistency support hence readObjectFromFile() is doing the same as createAction().
	 */
	public class Factory implements PersistencyFactory, ECBehaviorVRHandAction.ActionFactory
		public static fixed var String name = "HADefault"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return HADefault.new()
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(name, Factory.new())
		end
		
		public func BaseVRHandAction createAction(ECBehaviorVRHandAction.Instance instance)
			return HADefault.new()
		end
	end
	
	
	
	protected var bool grabActive
	
	
	
	/** Create action. */
	public func new()
	end
	
	
	
	/** Init behaviors. */
	protected func void initBehaviors()
		super.initBehaviors()
	end
	
	
	
	/** Action has been activated. */
	public func void activate(BehaviorElement actor, ECBehaviorVRHand.Instance vrHand)
		super.activate(actor, vrHand)
		
		// Enable grabber
		handGrabber.setEnabled(true)
		
		// Enable point-at
// 		handPointAt.setEnabled(true)
		handLaserPointer.setColor(Color.new(0, 1, 1))
		handLaserPointer.setIntensity(0.25)
	end
	
	/** Action is about to be deactivated. */
	public func void deactivate()
		// Disable grabber
		handGrabber.setEnabled(false)
		
		// Disable point-at
		handPointAt.setEnabled(false)
		
		super.deactivate()
	end
	
	/** Set up animator. */
	protected func void initAnimator()
		// Select animator to use. Use empty string to clear the animator. We do not want
		// to use an animator to not replace the hand pose if the player has empty hands
		handAnimated.setActiveAnimatorID("")
	end
	
	/** Frame update. */
	public func void think(float elapsed)
		if canGrabObject()
			handAction.setAction(HAReadyGrab.new(false))
			
		else
			// Change color of laser pointer depending if player points at an object or not
			if handPointAt.hasVRHandPointAtElement()
				handLaserPointer.setColor(Color.new(1, 0, 1))
				
			else
				handLaserPointer.setColor(Color.new(0, 1, 1))
			end
			
			super.think(elapsed)
		end
	end
	
	
	
	/** Check if player touches an object he can grab. */
	protected func bool canGrabObject()
		// If grab is active do not grab object as this would upset actions
		if grabActive
			return false
		end
		
		return handGrabber.findTouchingGrabSpot(block ECBehaviorGrabSpot.Instance grabSpot
			return grabSpot.isNotGrabbed()
		end) != null
	end
	
	
	
	/** Grab. */
	public func void grab()
		grabActive = true
	end
	
	/** Ungrab. */
	public func void ungrab()
		grabActive = false
	end
	
	/** Grab in the range from 0 to 1. */
	public func void grabAnalog(float value)
	end
	
	/** Squeeze force in the range from 0 to 1. */
	public func void squeeze(float value)
	end
	
	
	
	/**
	 * Name of PersistencyFactory required to load object from file. Since we do not use
	 * persistency this is not required but it is always a good idea to add this.
	 */
	public func String persistencyFactoryName()
		return Factory.name
	end
end
