/* 
 * Drag[en]gine Network Examine.
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace NetworkExample

pin Dragengine.Gui
pin Dragengine.Networking
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * Game state.
 */
class GameState
	/** Array of Player. */
	public var Array players
	
	/** Local player. */
	public var PlayerState localPlayer
	
	/** World file path */
	public var String pathWorldFile
	
	/** Game world. */
	public var GameWorld gameWorld
	
	/** Play ball. */
	public var BehaviorElement ball
	
	/** Player colors as Array of Color. */
	public var Array playerColors
	
	
	
	/**
	 * Create game state.
	 */
	public func new()
		players = Array.new()
		
		playerColors = Array.new()
		playerColors.add( Color.new( 1, 0, 0 ) )  // red
		playerColors.add( Color.new( 0, 0, 1 ) )  // blue
		playerColors.add( Color.new( 0, 1, 0 ) )  // green
		playerColors.add( Color.new( 1, 1, 0 ) )  // yellow
		playerColors.add( Color.new( 1, 0.5, 0 ) )  // orange
		playerColors.add( Color.new( 1, 0, 1 ) )  // purple
		playerColors.add( Color.new( 0, 1, 1 ) )  // cyan
		playerColors.add( Color.new( 0, 0.5, 1 ) )  // sort of blue
	end
	
	/**
	 * Dispose of game state.
	 */
	public func void dispose()
		if players != null
			players.forEach( block PlayerState each
				each.dispose()
			end )
			players = null
		end
		
		if ball != null
			ball.safeDispose()
			ball = null
		end
		
		localPlayer = null
	end
	
	/**
	 * Get game state.
	 */
	static public func GameState getGameState()
		return GameApp.getGameApp().gameState
	end
	
	
	
	/**
	 * Player with identifier or null if not found.
	 */
	public func PlayerState getPlayer( UniqueID id )
		return players.find( block PlayerState each
			return each.id.equals( id )
		end ) cast PlayerState
	end
	
	/**
	 * Player with number or null if not found.
	 */
	public func PlayerState getPlayerWithNumber( int number )
		return players.find( block PlayerState each
			return each.number == number
		end ) cast PlayerState
	end
	
	/**
	 * Spawn player.
	 */
	public func void spawnPlayer( PlayerActor player, String spawnPoint )
		gameWorld.getSpawnPoints().getNamed( spawnPoint ).spawn( gameWorld, player )
	end
	
	
	
	/**
	 * Create required game elements.
	 */
	public func void createGameElements()
		var GameApp app = GameApp.getGameApp()
		
		// Create play ball
		var StubElement stub = StubElement.new( \
			app.getElementClassList().getNamed( "Ball" ), app.getIDGenerator().nextID() )
		stub.setEnableNetworking( true )
		ball = stub.createElement() cast BehaviorElement
	end
	
	/**
	 * Spawn ball at spawn point.
	 */
	public func void spawnBall( String spawnName )
		gameWorld.getSpawnPoints().getNamed( spawnName ).spawn( gameWorld, ball )
	end
	
	/**
	 * Despawn ball.
	 */
	public func void despawnBall()
		ball.removeFromGameWorldIfPresent()
	end
end
