/* 
 * Drag[en]gine Network Examine.
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace NetworkExample

pin Dragengine.CameraDirectors
pin Dragengine.Networking
pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * Join game loader class.
 * 
 * Loads game world showing a WindowLoading. Once finished finishes setting up game and
 * hands control over to the game.
 * 
 * Uses WindowGameWorld.Loader as super class to directly update the WindowGameWorld
 * created by BaseGameApp.
 */
class JoinGame extends WindowGameWorld.Loader
	/** Name of host to join. */
	public var String hostName
	
	/** Player name. */
	public var String playerName
	
	
	
	/**
	 * Create start game loader.
	 */
	public func new( WindowGameWorld window ) super( window )
		// Enable networking for loaded game elements
		setEnableNetworking( true )
	end
	
	/**
	 * \brief Start loading game world.
	 * 
	 * Instead of loading the game world here just creates the loading window and start
	 * connecting. Once connected continue with super.startLoading().
	 */
	public func void startLoading()
		var GameApp app = BaseGameApp.getApp() cast GameApp
		
		try
			createLoadingWindow()
			getWindowLoading().getModelText().setText( "Connecting..." )
			
			app.gameState = GameState.new()
			
			app.networkPlayerClient = NetworkPlayerClient.new()
			app.networkPlayerClient.connectTo( hostName )
			
			startFrameUpdater()
			
		catch Exception e
			getConsole().addError( "Failed connecting", e )
			cleanUp()
			throw
		end
	end
	
	/**
	 * \brief Update loading.
	 * 
	 * For use by FrameUpdater.
	 */
	public func void updateLoading()
		var GameApp app = BaseGameApp.getApp() cast GameApp
		
		if app.networkPlayerClient == null
			// rejected or connection lost
			cleanUp()
			onLoadWorldFailed()
			
		elif getPathWorld() != null
			// loading in progress
			super.updateLoading()
			
		elif app.networkPlayerClient.isConnected()
			// connection established. wait for request to load game world
			if app.networkPlayerClient.requestLoadGameWorld == null
				return
			end
			
			// set player parameters
			app.gameState.localPlayer.name = UnicodeString.newFromUTF8( playerName )
			
			// start loading game world
			setPathWorld( app.networkPlayerClient.requestLoadGameWorld )
			super.startLoading()
			
		else
			// connecting
		end
	end
	
	/**
	 * Loading world finished successfully.
	 */
	public func void onLoadWorldFinished()
		var GameApp app = BaseGameApp.getApp() cast GameApp
		// var GameWorld gameWorld = getStubWorld().getGameWorld()
		
		// Set dummy camera directory until fully joined.
// 		getWindow().setCameraDirector( FixedCameraDirector.new( DVector.new( 0, 2, 0 ), Quaternion.new() ) )
		
		// Do more start game tasks here.
		
		// super-call to assign the game world to the game world window. The player can now
		// see and hear the game world
		super.onLoadWorldFinished()
		
		// Switch on processing binding input. Bindings run commands bound by the player
		// to his keyboard, mouse and game pads. To give control back to the desktop call
		// app.setInputProcessorDesktop() .
		app.setInputProcessorBindings()
		
		// Ready to start your game. This call cleans up the game loader so you can now
		// run the game. This has to come last
		app.finishLoadGameWorld()
		
		// Notify server
		app.networkPlayerClient.sendMessageLoadWorldFinished()
	end
	
	/**
	 * Loading world failed.
	 * 
	 * This method is called if any exceptions are thrown during loading the game world
	 * or if problems with element classes have been found.
	 */
	public func void onLoadWorldFailed()
		// super-call this first
		super.onLoadWorldFailed()
		
		// tear down networking if running
		var GameApp app = BaseGameApp.getApp() cast GameApp
		if app.networkPlayerClient != null
			app.networkPlayerClient.dispose()
			app.networkPlayerClient = null
		end
		
		// drop game state
		if app.gameState != null
			app.gameState.dispose()
			app.gameState = null
		end
		
		// This cleans up the game loader and allows you to continue for example by showing
		// the main menu again with an error message
		app.cancelLoadGameWorld()
		
		// Go back to main menu
		app.mainMenu.activate()
	end
end
