/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Events



/**
 * \brief Drag[en]gine Test Project.
 */
class TestProject extends BaseGameApp
	/** \brief Create game. */
	public func new()
		// the most simple solution is to use one gui theme for the entire project. you can
		// always add named gui themes inside this main gui theme. this way you can use custom
		// gui themes for different parts of the project without needing to manually load them.
		// 
		// keep in mind loaded gui themes are shared. do not modify them directly. if you need
		// to modify them create first a copy using the copy constructor
		this.pathDesktopGuiTheme = "/guithemes/ui.guitheme.xml"
	end
	
	
	
	/** \brief Init application. */
	public func void initGame()
		super.initGame()
		
		InputSystem.setCaptureInputDevices( false )
		
		// Start game by showing the Drag[en]gine Game Engine logo and optionally other logos
		// you would like to show. WindowLogo.show*() does all the work of showing a logo or
		// video with optional sound. Once the window is finished (the user can skip it)
		// the provided action listener is called. This can be creating a class implementing
		// ActionListener interface or by using BlockActionListener. This is a convenience
		// class allowing to use a block as an action and is suitable for quick code insertion
		// like this. Using a class implementing ActionListener is though favorable since it
		// makes it easier to chain actions in an understandable way.
		// 
		// Showing the Drag[en]gine Game Engine logo is not required at all to use this game
		// engine but we highly appreciate it if you do so.
		
		WindowLogo.showDragengineLogo( this.getDesktop(), BlockActionListener.new( \
			block ActionEvent event
				launchApplication()
			end ) )
	end
	
	/**
	 * \brief Launch example application.
	 * 
	 * Called after logo windows are finished.
	 */
	public func void launchApplication()
		this.getWindowGameWorld().becomeBackgroundWindow()
		
		this.addLogoWindow()
		WindowMain.new( this.getDesktop() )
	end
	
	/** \brief Process input event. */
	public func void inputEvent( InputEvent event )
		if event.getType() == InputEventType.keyPress and event.getCode() == InputEventKey.f10
			this.getScreenshotCreator().takeScreenshot()
			
		else
			super.inputEvent( event )
		end
	end
	
	
	
	/**
	 * \brief Add logo window.
	 * \details This is a disabled background window displaying only an image.
	 */
	private func void addLogoWindow()
		var Window window = Window.new()
		window.setEnabled( false )
		window.setCanFocus( false )
		window.setLayout( Layouts.BoxLayout.new( Layouts.LayoutAxis.x, 0 ) )
		window.setDesignerSelector( "LogoWindow" )
		window.addWidget( DisplayImage.new( Image.new( "/images/testproject_logo.jpg" ) ) )
		this.getDesktop().addWindow( window )
		
		window.fitToContent()
		window.setPosition( Point.new( ( this.getDesktop().getWidth() - window.getWidth() ) / 2, 10 ) )
	end
	
	
	
	/**
	 * \brief Create commands and add them to command list.
	 * 
	 * Removes "quit" command replacing it with closing WindowWorldRenderer.
	 */
	protected func void createAndAddCommands()
		super.createAndAddCommands()
		
		var Commands.CommandManager commands = this.getCommandManager()
		
		commands.remove( commands.getNamed( "quit" ) )
		commands.add( ExampleWorld.WindowWorldRenderer.CommandQuit.new() )
	end
	
	/**
	 * \brief Load element classes.
	 * 
	 * Add element class used for WindowWorldRenderer.
	 */
	protected func void createAndAddElementClasses()
		super.createAndAddElementClasses()
		
		var Scenery.ElementClassList list = this.getElementClassList()
		
		// element classes create world elements. they have a unique name used in the World
		// Editor to connect entities to behavior. to create a valid and working game world
		// they are not required but they provide a fully working and extendible framework
		// to build a game world with. furthermore they support preloading out of the box.
		list.add( ExampleWorld.StaticGeometryClass.new() )
		
		// element classes support XML subclassing. using the LoadElementClass loader you
		// can load element classes stored as *.deeclass files. XML classes require a hard
		// coded element class as super class. then element class properties can be modified
		// to create a new element class with modified behavior. XML subclassing is a simple
		// way to create pre-configurated element class variations. a good example are props
		// on a street. all props have the same behavior PropElement class but different model,
		// skin, rig and other parameters. using XML subclassing individual prop element
		// classes can be defined speeding up development while allowing to fine tune element
		// class parameters without the need to modify scripts all the time
		this.getLoaders().getElementClass().addXmlElementClasses( list, "/models", true )
	end
end
