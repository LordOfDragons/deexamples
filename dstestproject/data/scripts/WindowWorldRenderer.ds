/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin ExampleWorld

pin Dragengine.CameraDirectors
pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief DragonScript test project world renderer window.
 * 
 * Shows the use of WorldRenderer to display a GameWorld using a Camera.
 * The world is filled with some demonstration content including a very
 * basic player actor to move across the world.
 * 
 * To interact with the world click on the window to capture the mouse
 * and keyboard input. Mouse looks around while the DCZV keys are used
 * to walk forward, backward, left and right.
 * 
 * To leave the world use the right mouse button or press th escape key.
 */
class WindowWorldRenderer extends WindowGameWorld
	class LoadExampleWorld extends WindowGameWorld.Loader
		public func new( WindowGameWorld window ) super( window )
			setPathWorld( "/worlds/simple1/simple1.deworld" )
		end
		
		protected func void createLoadingWindow()
			// method is overwritten to avoid creating a loading window. by default a full
			// screen loading window is created. since we are not using a full screen game
			// world window this would look strange.
			// 
			// it is left as an excercise to the reader to implement a Panel layered over
			// the render window containing preloading information (hint WindowGameWorld
			// uses StackLayout layout).
		end
		
		public func void onLoadWorldFinished()
			var BaseGameApp app = TestProject.getApp()
			var GameWorld gameWorld = getStubWorld().getGameWorld()
			
			// spawn player actor
			var BaseActor player = StubElement.new( app.getElementClassList().getNamed( "Actor" ), \
				app.getIDGenerator().nextID() ).createElement() cast BaseActor
			player.getAIAction().setAction( BAAFirstPerson.new() )
			gameWorld.getSpawnPoints().getNamed( "player" ).spawn( gameWorld, player )
			player.getPlayerControllable().takeControl()
			
			// finish and start running
			getWindow().setCameraDirector( PlayerControlledActorCameraDirector.new() )
			getWindow().addMouseListener( GrabInputListener.new() )
			
			super.onLoadWorldFinished()
			app.finishLoadGameWorld()
		end
		
		public func void onLoadWorldFailed()
			super.onLoadWorldFailed()
			BaseGameApp.getApp().cancelLoadGameWorld()
			Engine.quit()
		end
	end
	
	class CommandQuit extends Command
		public func new()
			this.setName( "quit" )
			this.setDescription( "Quit Render Window" )
		end
		
		public func void stop()
			TestProject.getApp().getDesktop().setIsMouseHidden( false )
			TestProject.getApp().setInputProcessorDesktop()
			InputSystem.setCaptureInputDevices( false )
		end
	end
	
	class GrabInputListener extends DefaultMouseListener
		public func new()
		end
		
		public func void onButtonRelease( MouseEvent event )
			TestProject.getApp().setInputProcessorBindings()
			TestProject.getApp().getDesktop().setIsMouseHidden( true )
			InputSystem.setCaptureInputDevices( true )
		end
	end
	
	
	
	static private var WindowWorldRenderer pOpenWindow = null
	
	
	
	/** \brief Create window. */
	public func new() super( TestProject.getApp().getConsole() )
		if pOpenWindow != null
			throw EInvalidParam.new()
		end
		
		// by default WindowWorldRenderer switches to full screen mode. prevent this
		this.setWindowState( Window.WindowState.normal )
		
		// set the window size to 80% of desktop size using the smallest screen size
		var int width1 = ( GraphicSystem.getWindowWidth() cast float * 0.8 ) cast int
		var int height1 = ( width1 cast float * 0.75 ) cast int
		var int height2 = ( GraphicSystem.getWindowHeight() cast float * 0.8 ) cast int
		var int width2 = ( height2 cast float * 1.25 ) cast int
		
		if width1 < width2
			setSize( Point.new( width1, height1 ) )
			
		else
			setSize( Point.new( width2, height2 ) )
		end
		
		// load world
		TestProject.getApp().startLoadGameWorld( LoadExampleWorld.new( this ) )
		
		pOpenWindow = this
	end
	
	/** \brief Dispose of window. */
	public func void dispose()
		if pOpenWindow == this
			pOpenWindow = null
		end
		
		super.dispose()
	end
	
	
	
	/** \brief Open window or \em null. */
	static public func WindowWorldRenderer getOpenWindow()
		return pOpenWindow
	end
	
	
	
	/**  \brief Loading finished. */
	public func void loadingFinished()
		// todo
	end
	
	/**  \brief Loading failed. */
	public func void loadingFailed()
		// todo
	end
	
	
	
	/** \brief Create window content. */
	protected func void createContent()
		this.setDesignerSelector( "WindowPadding" )
		this.setTitle( "World Renderer" )
		
		this.setLayout( BorderLayout.new() )
		
		this.addWidget( Label.new( "LMB to interact, RMB/Escape to release\n" \
			+ "Mouse look-around, WASD move, E toggle run" ), BorderLayout.Area.top )
		
		this.addWidget( this.getWorldRenderer(), BorderLayout.Area.content )
	end
end
