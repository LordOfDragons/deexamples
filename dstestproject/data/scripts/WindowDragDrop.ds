/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Events
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.CanvasCreators
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief DragonScript test project drag and drop window.
 */
class WindowDragDrop extends Window
	/** \brief Drag and drop type. */
	static public var String dndTypeColor = "color"
	
	/**
	 * \brief Drop target listener.
	 */
	class DropTargetListener extends DefaultDragListener
		private var DisplayImage pWidget
		
		public func new( DisplayImage widget )
			this.pWidget = widget
		end
		
		/** \brief Drag enters widget. */
		public func void onDragEnter( DragEvent event )
			var DragAndDrop dnd = event.getDragAndDrop()
			dnd.setCanDrop( dnd.supportsDataType( WindowDragDrop.dndTypeColor ) )
		end
		
		/** \brief Drag leaves widget. */
		public func void onDragLeave( DragEvent event )
		end
		
		/** \brief Drag over. */
		public func void onDragOver( DragEvent event )
		end
		
		/** \brief Drag drop. */
		public func void onDragDrop( DragEvent event )
			var DragAndDrop dnd = event.getDragAndDrop()
			if not dnd.supportsDataType( WindowDragDrop.dndTypeColor )
				dnd.dropDone( false )
			end
			
			var Color color = dnd.getDragDataAs( WindowDragDrop.dndTypeColor ) cast Color
			var ColorMatrix colorMatrix = ColorMatrix.new()
			
			if not color.equals( Color.white )
				colorMatrix = ColorMatrix.newSaturation( 0 ) \
					* ColorMatrix.newBrightness( 0.25 ) \
					* ColorMatrix.newScaling( color * 1.5 )
			end
			
			this.pWidget.setColorTransformation( colorMatrix )
			dnd.dropDone( true )
		end
	end
	
	/**
	 * \brief Drag handler.
	 */
	class DragHandler extends DefaultDragAndDrop
		private var Color pColor
		
		/** \brief Create drag handler. */
		public func new( Widget source, Color color ) super( source )
			this.pColor = color
			this.addSupportedDataType( WindowDragDrop.dndTypeColor )
		end
		
		/**
		 * \brief Drag data in a specific format or \em null if not supported.
		 */
		public func Object getDragDataAs( String type )
			if type.equals( WindowDragDrop.dndTypeColor )
				return this.pColor
			end
			return null
		end
	end
	
	/**
	 * \brief Start drag listener.
	 */
	class StartDragListener extends DefaultMouseListener
		private var Color pColor
		
		/** \brief Create listener. */
		public func new( Color color )
			this.pColor = color
		end
		
		/** \brief Mouse button has been pressed. */
		public func void onButtonPress( MouseEvent event )
			if event.getButton() == InputEventMouseButton.left
				DragHandler.new( event.getSource() cast Widget, this.pColor ) \
					.beginDrag( InputEventMouseButton.left )
			end
		end
	end
	
	
	
	/** \brief Create game. */
	public func new() super( 0, 0, 300, 300 )
		this.setDesignerSelector( "WindowPadding" )
		this.setTitle( "Drag and Drop" )
		this.createContent( this )
	end
	
	
	
	/** \brief Add content. */
	private func void createContent( Container content )
		content.setLayout( CentrizedBoxLayout.new( LayoutAxis.y, 50 ) )
		
		// panel with colors
		this.addWidget( Panel.new( CentrizedBoxLayout.new( LayoutAxis.x, 10 ), block Panel panel
			this.addColorWell( panel, Color.white )
			this.addColorWell( panel, Color.red )
			this.addColorWell( panel, Color.green )
			this.addColorWell( panel, Color.blue )
			this.addColorWell( panel, Color.yellow )
			this.addColorWell( panel, Color.gray )
		end ) )
		
		// panel with images to drag colors to
		var Image image = Image.new( "/images/colorful.png" )
		this.addWidget( Panel.new( CentrizedBoxLayout.new( LayoutAxis.x, 50 ), block Panel panel
			this.addImage( panel, image )
			this.addImage( panel, image )
			this.addImage( panel, image )
		end ) )
	end
	
	/** \brief Add color well. */
	private func void addColorWell( Panel panel, Color color )
		var Widget well = Widget.new()
		
		var RectangleCanvasCreator bg = RectangleCanvasCreator.new( color, Color.black )
		bg.setThickness( 2 )
		well.setBackgroundCanvasCreator( bg )
		well.setProtectBackgroundCanvasCreator( true ) // not changed by widget designer
		
		well.setMinimumSize( Point.new( 60, 40 ) )
		well.setProtectMinimumSize( true ) // not changed by widget designer
		
		well.addMouseListener( StartDragListener.new( color ) )
		
		panel.addWidget( well )
	end
	
	/** \brief Add image. */
	private func void addImage( Panel panel, Image image )
		var DisplayImage displayImage = DisplayImage.new( image )
		displayImage.addDragListener( DropTargetListener.new( displayImage ) )
		panel.addWidget( displayImage )
	end
end
