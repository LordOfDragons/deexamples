/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2017, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace ExampleWorld

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief DragonScript test project world renderer window static geometry element class.
 * 
 * Copy of SimpleElementClass as example implementation of an element class.
 * 
 * This class is responsible to defined the resources used by elements created
 * from this class.
 */
class StaticGeometryClass extends BehaviorElementClass
	/**
	 * \brief Component behavior providing visual representation of element.
	 */
	private var ECBehaviorComponent pComponent
	
	/**
	 * \brief Collider behavior providing physical presence of element.
	 */
	private var ECBehaviorCollider pCollider
	
	/**
	 * \brief Navigation space behavior allowing actors to navigate along element using Navigator.
	 */
	private var ECBehaviorNavigationSpace pNavigationSpace
	
	/**
	 * \brief Behavior providing support to attach element to other elements using editor.
	 */
	private var ECBehaviorAttachToParent pAttachToParent
	
	
	
	/**
	 * \brief Create static geometry element class.
	 * 
	 * This is a convenience constructor defining the class name. This is the
	 * class names used in the World Editor. It is usually the name of the
	 * element script class but can be anything as long as it is unique.
	 */
	public func new() this( "StaticGeometry" )
	end
	
	/**
	 * \brief Create static geometry element class.
	 * 
	 * This is the default constructor and allows subclasses to be created
	 * with a different element class name.
	 */
	public func new( String className ) super( className )
		// Create and store behaviors. By creating a behavior it is added to the element
		// class provided as argument. From this point on the behavior is responsible to
		// do all the organizational tasks required to provide the requested behavior.
		// 
		// The order in which behaviors are created is important. Certain behaviors
		// depend on other behaviors to work correctly. Make sure such dependencies are
		// added to the element class before behavior depending on them.
		// 
		// Storing the behaviors is not mandatory. The BehaviorElementClass stores
		// references to the behaviors. It is though recommended to store them for two
		// reasons. First element classes subclassing this element classes and easily
		// modify properties of already created behaviors without needing to search
		// for them using getBehaviorIn(). Second elements created from this element
		// class can obtain and store BehaviorInstance of desired behaviors using
		// instance() calls instead of searching or them which is faster.
		this.pComponent = ECBehaviorComponent.new( this, null )
		this.pCollider = ECBehaviorCollider.new( this, this.pComponent )
		this.pNavigationSpace = ECBehaviorNavigationSpace.new( this, this.pCollider )
		this.pAttachToParent = ECBehaviorAttachToParent.new( this, this.pCollider, null )
		
		// for the time being a default skin is required. pComponent is a component
		// behavior. It contains an ECComposeComponent instance obtained by calling
		// getComponent(). ECCompose* classes are helper classes to build element
		// classes. They create typically used element properties for certain resource
		// types. This ensures various element classes share common layout of properties
		// for these resource types eliminating sources of bugs. One of these properties
		// is obtained using getSkin(). This is an ECPSkin property which stores the
		// String path of the skin to load. Calling setPath() allows to change the
		// default path which artists later on can overwrite using XML Element Classes
		// like this:
		// \code{.xml}
		// <string name='component.skin'>/materials/something.deskin</string>
		// \endcode
		// Or by setting the object property "component.skin" in the World Editor.
		this.pComponent.getComponent().getSkin().setPath( "/materials/empty.deskin" )
	end
	
	
	
	/**
	 * \brief Component behavior.
	 */
	public func ECBehaviorComponent getComponent()
		return this.pComponent
	end
	
	/**
	 * \brief Collider behavior.
	 */
	public func ECBehaviorCollider getCollider()
		return this.pCollider
	end
	
	/**
	 * \brief Navigation space behavior.
	 */
	public func ECBehaviorNavigationSpace getNavigationSpace()
		return this.pNavigationSpace
	end
	
	/**
	 * \brief Attach to parent behavior.
	 */
	public func ECBehaviorAttachToParent getAttachToParent()
		return this.pAttachToParent
	end
	
	
	
	/**
	 * \brief Create StaticGeometryClass with different name.
	 * 
	 * Used for example for creating element classes using XML files. All element
	 * classes are required to overwrite this method.
	 */
	public func ElementClass duplicateNamed( String classname )
		return StaticGeometryClass.new( classname )
	end
	
	/**
	 * \brief Create element instance.
	 * 
	 * If this element class does not support creating elements, for example because
	 * the result is not an element, \em null has to be returned. The default
	 * implementation returns \em null. Subclasses not intending to create elements
	 * or requiring special creation handling should subclass createAndAddElement()
	 * and loadAndAddElement() bypassing this method.
	 */
	protected func Element createElement()
		return StaticGeometry.new( this )
	end
end
