/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Events
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief DragonScript test project image window.
 */
class WindowImage extends Window
	/** \brief Named repeat mode. */
	public class NamedRepeatMode
		/** \brief Name. */
		private var String pName
		
		/** \brief Repeat mode. */
		private var RepeatMode pRepeatMode
		
		/** \brief Create named repeat mode. */
		public func new( String name, RepeatMode repeatMode )
			this.pName = name
			this.pRepeatMode = repeatMode
		end
		
		/** \brief Name. */
		public func String getName()
			return this.pName
		end
		
		/** \brief Repeat mode. */
		public func RepeatMode getRepeatMode()
			return this.pRepeatMode
		end
		
		/** \brief String representation. */
		public func String toString()
			return this.pName
		end
	end
	
	/** \brief Repeat mode selection listener. */
	public class SelectionListenerRepeatMode extends DefaultListModelListener
		/** \brief Widget. */
		private var DisplayImage pWidget
		
		/** \brief Create selection listener. */
		public func new( DisplayImage widget )
			this.pWidget = widget
		end
		
		/** \brief Selection changed. */
		public func void selectionChanged( ListModel listModel )
			this.pWidget.setRepeatMode( ( listModel.getAt( listModel.getSelected() ) \
				cast NamedRepeatMode ).getRepeatMode() )
		end
	end
	
	
	
	private var DefaultListModel pModelRepeatModes
	private var FrameUpdateListener pUpdaterRotation
	
	
	
	/** \brief Create game. */
	public func new() super( 0, 0, 600, 300 )
		this.pModelRepeatModes = DefaultListModel.new()
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Repeat Once", RepeatMode.once ) )
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Stretch in both directions", RepeatMode.stretch ) )
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Tile along X direction", RepeatMode.tileX ) )
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Tile along Y direction", RepeatMode.tileY ) )
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Tile along both directions", RepeatMode.tile ) )
		
		this.runWhileBlockingLayout( block
			this.setDesignerSelector( "WindowPadding" )
			this.setTitle( "Image" )
			this.createContent( this )
		end )
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		if this.pUpdaterRotation != null
			this.pUpdaterRotation.giveUp()
			this.pUpdaterRotation = null
		end
		super.dispose()
	end
	
	
	
	/** \brief Add content. */
	private func void createContent( Container content )
		content.setLayout( GridLayout.new( 2, 1 ) )
		
		// regular image
		content.addWidget( Panel.new( BorderLayout.new( 5 ), block Panel p
			// combo box line
			p.addWidget( Panel.new( FlowLayout.new( LayoutAxis.x, 10, FlowLayout.Stretch.last ), block Panel p2
				p2.addWidget( Label.new( "Repeat Mode:" ) )
				p2.addWidget( ComboBox.new( this.pModelRepeatModes ) )
			end ), BorderLayout.Area.top )
			
			// image
			var DisplayImage displayImage = DisplayImage.new( Image.new( "/images/colorful.png" ) )
			p.addWidget( displayImage, BorderLayout.Area.content )
			this.pModelRepeatModes.addListener( SelectionListenerRepeatMode.new( displayImage ) )
		end ) )
		
		// rotating image
		content.addWidget( Panel.new( BoxLayout.new( LayoutAxis.x ), block Panel p
			var DisplayRotatingImage displayImage = DisplayRotatingImage.new( Image.new( "/images/colorful.png" ) )
			//displayImage.setScale( 4 )
			//displayImage.setImageOffset( Vector2.new( 0.5, 0 ) )
			p.addWidget( displayImage )
			this.pUpdaterRotation = BlockFrameUpdateListener.new( block float elapsed
				displayImage.setRotation( displayImage.getRotation() + elapsed * 45 )
			end )
			this.pModelRepeatModes.addListener( SelectionListenerRepeatMode.new( displayImage ) )
		end ) )
	end
end
