/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Events
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief DragonScript test project image window.
 */
class WindowImage extends Window
	/** \brief Named repeat mode. */
	public class NamedRepeatMode
		/** \brief Name. */
		private var String pName
		
		/** \brief Repeat mode. */
		private var RepeatMode pRepeatMode
		
		/** \brief Create named repeat mode. */
		public func new( String name, RepeatMode repeatMode )
			this.pName = name
			this.pRepeatMode = repeatMode
		end
		
		/** \brief Name. */
		public func String getName()
			return this.pName
		end
		
		/** \brief Repeat mode. */
		public func RepeatMode getRepeatMode()
			return this.pRepeatMode
		end
		
		/** \brief String representation. */
		public func String toString()
			return this.pName
		end
	end
	
	/** \brief Repeat mode selection listener. */
	public class SelectionListenerRepeatMode extends DefaultListModelListener
		/** \brief Widget. */
		private var DisplayImage pWidget
		
		/** \brief Create selection listener. */
		public func new( DisplayImage widget )
			this.pWidget = widget
		end
		
		/** \brief Selection changed. */
		public func void selectionChanged( ListModel listModel )
			this.pWidget.setRepeatMode( ( listModel.getAt( listModel.getSelected() ) \
				cast NamedRepeatMode ).getRepeatMode() )
		end
	end
	
	
	
	/** \brief Repeat mode list model. */
	private var DefaultListModel pModelRepeatModes
	
	
	
	/** \brief Create game. */
	public func new() super( 0, 0, 300, 300 )
		this.setDesignerSelector( "WindowPadding" )
		this.setTitle( "Image" )
		
		this.pModelRepeatModes = DefaultListModel.new()
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Repeat Once", RepeatMode.once ) )
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Stretch in both directions", RepeatMode.stretch ) )
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Tile along X direction", RepeatMode.tileX ) )
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Tile along Y direction", RepeatMode.tileY ) )
		this.pModelRepeatModes.add( NamedRepeatMode.new( "Tile along both directions", RepeatMode.tile ) )
		
		this.createContent( this )
	end
	
	
	
	/** \brief Add content. */
	private func void createContent( Container content )
		content.setLayout( BorderLayout.new( 5 ) )
		
		// combo box line
		var Panel row = Panel.new()
		row.setLayout( FlowLayout.new( LayoutAxis.x, 10, FlowLayout.Stretch.last ) )
		row.addWidget( Label.new( "Repeat Mode:" ) )
		var ComboBox comboBox = ComboBox.new( this.pModelRepeatModes )
		row.addWidget( comboBox )
		content.addWidget( row, BorderLayout.Area.top )
		
		// image
		var Image image = Image.new( "/images/colorful.png" )
		var DisplayImage displayImage = DisplayImage.new( image )
		content.addWidget( displayImage, BorderLayout.Area.content )
		
		this.pModelRepeatModes.addListener( SelectionListenerRepeatMode.new( displayImage ) )
	end
end
