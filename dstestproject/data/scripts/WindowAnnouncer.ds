/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, PlÃ¼ss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Audio.Announcer
pin Dragengine.Files
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief DragonScript test project announcer window.
 */
class WindowAnnouncer extends Window
	/** \brief Announcer list selection listener. */
	private class SelectAnnouncerListener extends DefaultListModelListener
		/** \brief Window. */
		private var WindowAnnouncer pWindow
		
		/** \brief Create timer. */
		public func new( WindowAnnouncer window )
			this.pWindow = window
		end
		
		/** \brief Selection changed. */
		public func void selectionChanged( ListModel listModel )
			var int selection = listModel.getSelected()
			if selection != -1
				this.pWindow.setAnnouncer( ( listModel.getAt( selection ) cast NamedAnnouncer ).getAnnouncer() )
			end
		end
	end
	
	/** \brief Play action. */
	private class PlayAction extends DefaultActionListener
		/** \brief Window. */
		private var WindowAnnouncer pWindow
		
		/** \brief Create action. */
		public func new( WindowAnnouncer window )
			this.pWindow = window
		end
		
		/** \brief Do action. */
		public func void onAction(ActionEvent event)
			this.pWindow.play()
		end
	end
	
	/** \brief Stop action. */
	private class StopAction extends DefaultActionListener
		/** \brief Window. */
		private var WindowAnnouncer pWindow
		
		/** \brief Create action. */
		public func new( WindowAnnouncer window )
			this.pWindow = window
		end
		
		/** \brief Do action. */
		public func void onAction(ActionEvent event)
			this.pWindow.stop()
		end
	end
	
	/** \brief Announcer wrapped with display name for list use. */
	private class NamedAnnouncer
		/** \brief Announcer. */
		private var Announcer pAnnouncer
		
		/** \brief Name to display in list. */
		private var String pName
		
		/** \brief Create named announcer. */
		public func new( Announcer announcer, String name )
			this.pAnnouncer = announcer
			this.pName = name
		end
		
		/** \brief Announcer. */
		public func Announcer getAnnouncer()
			return this.pAnnouncer
		end
		
		/** \brief String representation. */
		public func String toString()
			return this.pName
		end
	end
	
	/** \brief Preloading announcer finished. */
	private class PreloadAnnouncerFinished extends DefaultPreloadListener
		/** \brief Window. */
		private var WindowAnnouncer pWindow
		
		/** \brief Named announcer. */
		private var NamedAnnouncer pAnnouncer
		
		/** \brief Create listener. */
		public func new( WindowAnnouncer window, NamedAnnouncer announcer )
			this.pWindow = window
			this.pAnnouncer = announcer
		end
		
		/** \brief Preloading of all resources finished. */
		public func void preloadingFinished( Preloader preloader, bool success )
			if success
				this.pWindow.addAnnouncer( this.pAnnouncer ) 
			end
		end
	end
	
	
	
	/** \brief Announcer or \em null if not set. */
	private var Announcer pAnnouncer
	
	/** \brief Announcer list model. */
	private var DefaultListModel pModelAnnouncer
	
	/** \brief Announcer list. */
	private var ListBox pListAnnouncer
	
	/** \brief Announcer part list model. */
	private var DefaultListModel pModelPart
	
	/** \brief Announcer part list. */
	private var ListBox pListPart
	
	/** \brief Announcer text model. */
	private var TextModel pModelAnnounceText
	
	/** \brief Microphone. */
	private var Microphone pMicrophone
	
	
	
	/** \brief Create window. */
	public func new() super( 0, 0, 400, 400 )
		this.setTitle( "Announcer" )
		
		this.pMicrophone = Microphone.new()
		AudioSystem.setActiveMicrophone( this.pMicrophone )
	
		this.pModelAnnounceText = DefaultTextModel.new( "" )
		
		this.pModelAnnouncer = DefaultListModel.new()
		this.scanAnnouncer( TestProject.getApp().getLoaders().getAnnouncer(), "/announcer" )
		
		this.pModelPart = DefaultListModel.new()
		
		this.createContent()
		
		if this.pModelAnnouncer.getCount() > 0
			this.pListAnnouncer.setSelectedElement( 0 )
			this.setAnnouncer( ( this.pModelAnnouncer.getAt( 0 ) cast NamedAnnouncer ).getAnnouncer() )
		end
	end
	
	/** \brief Dispose of window. */
	public func void dispose()
		super.dispose()
		
		this.pAnnouncer = null
		
		this.pModelAnnounceText = null
		this.pListPart = null
		this.pModelPart = null
		this.pListAnnouncer = null
		this.pModelAnnouncer = null
		
		if this.pMicrophone != null
			if this.pMicrophone.equals( AudioSystem.getActiveMicrophone() )
				AudioSystem.setActiveMicrophone( null )
			end
			this.pMicrophone = null
		end
	end
	
	
	
	/** \brief Play selected announcer. */
	public func void play()
		if this.pAnnouncer == null
			return
		end
		
		var String announceText = this.pModelAnnounceText.getText()
		if announceText.empty()
			return
		end
		
		this.pAnnouncer.setAnnounceFromText( announceText )
		this.pAnnouncer.play()
	end
	
	/** \brief Stop selected announcer. */
	public func void stop()
		if this.pAnnouncer == null
			return
		end
		
		this.pAnnouncer.stop()
	end
	
	
	
	/** \brief Scan directory for announcer and load them. */
	public func void scanAnnouncer( LoadAnnouncer loader, String directory )
		FileSystem.searchFiles( directory, true, block String each, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern( each, "*.announcer.xml" )
				try
					// this version would load synchronously
					//this.pModelAnnouncer.add( NamedAnnouncer.new( \
					//	loader.loadFromFile( each ), File.new( each ).getName().substring( 0, -13 ) ) )
					
					// this version loads asynchronously. using preloaders is prefered over synchronous
					// loading since this allows the game engine to load multiple resource efficiently
					// in parallel and the gui does not block until loading finished
					var PreloadAnnouncer preloader = loader.loadFromFileAsync( each, null )
					preloader.addListener( PreloadAnnouncerFinished.new( this, NamedAnnouncer.new( \
						preloader.getAnnouncer(), File.new( each ).getName().substring( 0, -14 ) ) ) )
					preloader.checkFinished()
					
				catch Exception e
					e.printTrace()
				end
			end
			return true
		end )
	end
	
	/** \brief Add announcer. */
	public func void addAnnouncer( NamedAnnouncer announcer )
		// can be called by preloaders after window has been disposed so check this
		if this.pModelAnnouncer == null
			return
		end
		
		this.pModelAnnouncer.add( announcer )
	end
	
	/** \brief Set announcer to play or \em null if not set. */
	public func void setAnnouncer( Announcer announcer )
		if announcer == this.pAnnouncer
			return
		end
		
		if this.pAnnouncer != null
			this.pMicrophone.removeSpeaker( this.pAnnouncer.getSpeaker() )
			this.pAnnouncer.stop()
		end
		
		this.pAnnouncer = announcer
		this.updateParts()
		
		if announcer != null
			this.pMicrophone.addSpeaker( announcer.getSpeaker() )
		end
	end
	
	/** \brief Create content. */
	private func void createContent()
		this.setLayout( BorderLayout.new( 5 ) )
		this.setDesignerSelector( "WindowPadding" )
		
		// announcer based widgets
		var Panel panelAnnouncer = Panel.new()
		panelAnnouncer.setLayout( BorderLayout.new( 5 ) )
		this.addWidget( panelAnnouncer, BorderLayout.Area.content )
		
		// announcer selector
		this.pListAnnouncer = ListBox.new( this.pModelAnnouncer )
		this.pListAnnouncer.setDesignerSelector( "ListBox.Announcers" )
		var ScrollPanel scrollPanelAnnouncer = ScrollPanel.new( this.pListAnnouncer )
		panelAnnouncer.addWidget( scrollPanelAnnouncer, BorderLayout.Area.left )
		this.pModelAnnouncer.addListener( SelectAnnouncerListener.new( this ) )
		
		// part list of selected announcer
		this.pListPart = ListBox.new( this.pModelPart )
		var ScrollPanel scrollPanelPart = ScrollPanel.new( this.pListPart )
		panelAnnouncer.addWidget( scrollPanelPart, BorderLayout.Area.content )
		
		// announce text
		var Panel panelAnnounceText = Panel.new()
		panelAnnounceText.setLayout( BorderLayout.new( 5 ) )
		panelAnnouncer.addWidget( panelAnnounceText, BorderLayout.Area.bottom )
		panelAnnounceText.addWidget( Label.new( "Text:" ), BorderLayout.Area.left )
		panelAnnounceText.addWidget( TextField.new( this.pModelAnnounceText ), BorderLayout.Area.content )
		
		// button line
		var Panel panelButtons = Panel.new()
		panelButtons.setLayout( BoxLayout.new( LayoutAxis.x, 5 ) )
		
		var Button button = Button.new( "Play" )
		button.addActionListener( PlayAction.new( this ) )
		panelButtons.addWidget( button )
		
		button = Button.new( "Stop" )
		button.addActionListener( StopAction.new( this ) )
		panelButtons.addWidget( button )
		
		button = Button.new( "Close" )
		button.addActionListener( CloseWindowActionListener.new( this ) )
		panelButtons.addWidget( button )
		
		this.addWidget( panelButtons, BorderLayout.Area.bottom )
	end
	
	/** \brief Update parts. */
	public func void updateParts()
		if this.pAnnouncer == null
			this.pModelPart.removeAll()
			return
		end
		
		var Array parts = Array.new()
		this.pAnnouncer.forEachPart( block AnnouncerPart each
			parts.add( each.getID() )
		end )
		parts.sort()
		this.pModelPart.setContent( parts )
	end
end
