/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Commands
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave



/**
 * \brief DragonScript test project edit bindings window.
 */
class WindowEditBindings extends Window
	/** \brief Log message. */
	class LogMessage implements ConsoleListener
		public func new()
		end
		
		public func void messageAdded( Console console, ConsoleMessage message, bool removedTop )
			BaseGameApp.getApp().getConsole().addMessage( message.getMessage() )
		end
		
		public func void consoleCleared( Console console )
		end
	end
	
	/** \brief Save bindings on BaseGameApp on window close listener. */
	public class CloseSaveBindings extends DefaultWindowListener
		public func new()
		end
		
		public func void onWindowClosing( WindowEvent event )
			BaseGameApp.getApp().saveBindings()
		end
	end
	
	
	
	
	
	/** \brief Create window. */
	public func new() super( 0, 0, 700, 500 )
		this.pConsole = Console.new( 20 )
		this.pConsole.addListener( LogMessage.new() )
		
		this.setDesignerSelector( "WindowPadding" )
		this.setTitle( "Edit Bindings" )
		
		this.createCommandManager()
		this.createBindingManager()
		
		this.runWhileBlockingLayout( block
			this.createContent( this )
			this.addCommandsToModel()
		end )
		
		this.addWindowListener( CloseSaveBindings.new() )
	end
	
	/** \brief Dispose of window. */
	public func void dispose()
		this.pPanelEditBindings = null
		this.pBindingManager = null
		this.pCommandManager = null
		this.pConsole = null
		
		super.dispose()
	end
	
	
	
	private var Console pConsole
	private var BindingManager pBindingManager
	private var CommandManager pCommandManager
	private var EditBindingsPanel pPanelEditBindings
	
	
	
	/** \brief Create content. */
	private func void createContent( Container content )
		content.setLayout( BorderLayout.new( 5 ) )
		
		this.pPanelEditBindings = EditBindingsPanel.new( this.pBindingManager )
		this.addWidget( this.pPanelEditBindings, BorderLayout.Area.content )
	end
	
	
	
	/** \brief Create command manager with some dummy commands doing nothing. */
	public func void createCommandManager()
		var int i
		
		this.pCommandManager = CommandManager.new()
		
		this.pCommandManager.add( Command.new( "forward", "Move forward" ) )
		this.pCommandManager.add( Command.new( "backward", "Move backward" ) )
		this.pCommandManager.add( Command.new( "analogForwardBackward", "Analog move forward/backward" ) )
		this.pCommandManager.add( Command.new( "moveRight", "Move right" ) )
		this.pCommandManager.add( Command.new( "moveLeft", "Move left" ) )
		this.pCommandManager.add( Command.new( "analogHorizontal", "Analog move left/right" ) )
		this.pCommandManager.add( Command.new( "lookUp", "Look up" ) )
		this.pCommandManager.add( Command.new( "lookDown", "Look down" ) )
		this.pCommandManager.add( Command.new( "analogLookVertical", "Analog look up/down" ) )
		this.pCommandManager.add( Command.new( "lookLeft", "Look left" ) )
		this.pCommandManager.add( Command.new( "lookRight", "Look right" ) )
		this.pCommandManager.add( Command.new( "analogLookHorizontal", "Analog look left/right" ) )
		this.pCommandManager.add( Command.new( "jump", "Jump" ) )
		this.pCommandManager.add( Command.new( "crouch", "Crouch" ) )
		this.pCommandManager.add( Command.new( "use", "Use object" ) )
		this.pCommandManager.add( Command.new( "switchGadget", "Cycle through gadgets (axis use)" ) )
		this.pCommandManager.add( Command.new( "nextGadget", "Switch to next gadget" ) )
		this.pCommandManager.add( Command.new( "prevGadget", "Switch to previous gadget" ) )
		for i = 0 to 10
			this.pCommandManager.add( Command.new( "quickUse" + (i+1), "Quick Use " + (i+1) ) )
		end
		for i = 0 to 5
			this.pCommandManager.add( Command.new( "action" + (i+1), "Action " + (i+1) ) )
		end
		this.pCommandManager.add( Command.new( "load", "Load game" ) )
		this.pCommandManager.add( Command.new( "save", "Save game" ) )
		this.pCommandManager.add( Command.new( "quit", "Quit game" ) )
	end
	
	/** \brief Create binding manager with some dummy bindings. */
	public func void createBindingManager()
		// create binding manager and update lookup. this initializes the device listing so
		// we can try to come up with some reasonable example bindings
		this.pBindingManager = BindingManager.new()
		
		// to add reasonable default bindings you can use DefaultBindingHelper. all the
		// bind* methods return true if all requested bindings have been added. combined
		// with *clear methods this can be used to try out different layouts if present.
		// usually the most simple solution is to assign a set of bindings which seem
		// reasonable no matter if they are all properly bound or not. after all the user
		// is going to edit the bindings anyways
		var DefaultBindingHelper helper = DefaultBindingHelper.new( \
			this.pBindingManager, this.pCommandManager )
		
		// if mouse and keyboard is present add some bindings for them
		if helper.hasMouse()
			helper.mouseBindMove( "analogLookHorizontal", "analogLookVertical" )
			helper.mouseBindWheel( 0, "switchGadget" )
			helper.mouseBindLMR( "use", "action2", "action1" )
		end
		
		if helper.hasKeyboard()
			helper.keyboardBindKeyCode( InputEventKey.arrowUp, "forward" )
			helper.keyboardBindKeyCode( InputEventKey.arrowDown, "backward" )
			helper.keyboardBindKeyCode( InputEventKey.arrowRight, "moveRight" )
			helper.keyboardBindKeyCode( InputEventKey.arrowLeft, "moveLeft" )
			
			helper.keyboardBindKeyCode( InputEventKey.i, "lookUp" )
			helper.keyboardBindKeyCode( InputEventKey.k, "lookDown" )
			helper.keyboardBindKeyCode( InputEventKey.j, "lookLeft" )
			helper.keyboardBindKeyCode( InputEventKey.l, "lookRight" )
			
			helper.keyboardBindKeyCode( InputEventKey.space, "jump" )
			helper.keyboardBindKeyCode( InputEventKey.o, "crouch" )
			
			helper.keyboardBindKeyCode( InputEventKey.digit1, "quickUse1" )
			helper.keyboardBindKeyCode( InputEventKey.digit2, "quickUse2" )
			helper.keyboardBindKeyCode( InputEventKey.digit3, "quickUse3" )
			
			helper.keyboardBindKeyCode( InputEventKey.q, "quit" )
		end
		
		// if there is a gamepad attached add some bindings
		if helper.hasGamepad()
			helper.gamepadBindStick( 0, "analogHorizontal", "analogForwardBackward" )
			helper.gamepadBindStick( 1, "analogLookHorizontal", "analogLookVertical" )
			
			helper.gamepadBindHat( 0, null, "switchGadget" )
			
			helper.gamepadBindButton( 0, "use" )
			helper.gamepadBindButton( 1, "jump" )
			helper.gamepadBindButton( 2, "crouch" )
			helper.gamepadBindButton( 3, "action1" )
		end
		
		// apply all the found bindings
		helper.updateBindingManager( true )
	end
	
	/** \brief Add commands to edit to edit bindings model. */
	public func void addCommandsToModel()
		var Array list = Array.new()
		var int i
		
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "forward" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "backward" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "analogForwardBackward" ), \
			EditBindingsListModelEntry.InputSource.axis ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "moveRight" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "moveLeft" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "analogHorizontal" ), \
			EditBindingsListModelEntry.InputSource.axis ) )
		
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "lookUp" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "lookDown" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "analogLookVertical" ), \
			EditBindingsListModelEntry.InputSource.axis ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "lookLeft" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "lookRight" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "analogLookHorizontal" ), \
			EditBindingsListModelEntry.InputSource.axis ) )
		
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "jump" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "crouch" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "use" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		for i = 0 to 10
			list.add( EditBindingsListModelEntry.new( \
				this.pCommandManager.getNamed( "quickUse" + (i+1) ), \
				EditBindingsListModelEntry.InputSource.button ) )
		end
		for i = 0 to 5
			list.add( EditBindingsListModelEntry.new( \
				this.pCommandManager.getNamed( "action" + (i+1) ), \
				EditBindingsListModelEntry.InputSource.button ) )
		end
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "switchGadget" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "load" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "save" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		list.add( EditBindingsListModelEntry.new( \
			this.pCommandManager.getNamed( "quit" ), \
			EditBindingsListModelEntry.InputSource.button ) )
		
		this.pPanelEditBindings.getModel().addAll( list )
	end
end
