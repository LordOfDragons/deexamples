/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Events
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief DragonScript test project layout show case.
 */
class WindowLayouts extends Window
	/** \brief Change edit text model action listener. */
	public class ChangeLayoutListener extends DefaultListModelListener
		/** \brief Layout to update. */
		private var WindowLayouts pWindow
		
		/** \brief Create action listener. */
		public func new( WindowLayouts window )
			this.pWindow = window
		end
		
		/** \brief Selection changed. */
		public func void selectionChanged( ListModel listModel )
			this.pWindow.switchLayout()
		end
	end
	
	
	
	/** \brief Combo box. */
	private var ComboBox pCBLayouts
	
	/** \brief Switch panel. */
	private var Panel pPanelLayouts
	
	/** \brief Switch panel layout. */
	private var TabLayout pPanelLayoutsSwither
	
	
	
	/** \brief Create game. */
	public func new() super( 0, 0, 600, 600 )
		this.setLayout( BorderLayout.new() )
		this.setTitle( "Layout Show-Case" )
		this.createContent()
		this.pCBLayouts.setSelectedElement( 0 )
	end
	
	/** \brief Dispose of window. */
	public func void dispose()
		super.dispose()
		
		this.pCBLayouts = null
		this.pPanelLayouts = null
		this.pPanelLayoutsSwither = null
	end
	
	
	
	/** \brief Switch to layout show-case. */
	public func void switchLayout()
		this.pPanelLayoutsSwither.selectTab( this.pPanelLayouts, this.pCBLayouts.getSelectedElement() )
	end
	
	
	
	/** \brief Add content. */
	private func void createContent()
		this.runWhileBlockingLayout( block
			// combo box to select layout show case panel
			var DefaultListModel modelLayouts = DefaultListModel.new()
			
			var Panel row = Panel.new()
			row.runWhileBlockingLayout( block
				row.setDesignerSelector( "WindowLayouts.Panel2" )
				row.setLayout( FlowLayout.new( LayoutAxis.x, 10, FlowLayout.Stretch.last ) )
				row.addWidget( Label.new( "Layout:" ) )
				
				this.pCBLayouts = ComboBox.new( modelLayouts )
				row.addWidget( this.pCBLayouts )
				this.addWidget( row, BorderLayout.Area.top )
				modelLayouts.addListener( ChangeLayoutListener.new( this ) )
			end )
			
			// tabbed layout sets
			this.pPanelLayouts = Panel.new()
			this.pPanelLayouts.runWhileBlockingLayout( block
				this.pPanelLayouts.setDesignerSelector( "Panel.Layouts" )
				this.pPanelLayoutsSwither = TabLayout.new()
				this.pPanelLayouts.setLayout( this.pPanelLayoutsSwither )
				
				this.createBorderLayout( modelLayouts )
				this.createBoxLayout( modelLayouts )
				this.createFlowLayoutX( modelLayouts )
				this.createFlowLayoutY( modelLayouts )
				this.createWeightLayoutX( modelLayouts )
				this.createWeightLayoutY( modelLayouts )
				this.createCentrizedBoxLayout( modelLayouts )
				this.createFixedLayout( modelLayouts )
				this.createFixedMinimumLayout( modelLayouts )
				this.createFormLayout( modelLayouts, true )
				this.createFormLayout( modelLayouts, false )
				this.createGridLayout( modelLayouts )
				this.createLabelBoxLayoutY( modelLayouts )
			end )
			
			this.addWidget( this.pPanelLayouts, BorderLayout.Area.content )
		end )
		
		this.doLayout()
	end
	
	/** \brief Create layout border layout. */
	private func void createBorderLayout( DefaultListModel modelLayouts )
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setDesignerSelector( "WindowLayouts.Panel1" )
			panel.setLayout( BorderLayout.new( 4 ) )
			panel.addWidget( Button.new( "LEFT" ), BorderLayout.Area.left )
			panel.addWidget( Button.new( "TOP" ), BorderLayout.Area.top )
			panel.addWidget( Button.new( "RIGHT" ), BorderLayout.Area.right )
			panel.addWidget( Button.new( "BOTTOM" ), BorderLayout.Area.bottom )
			panel.addWidget( Button.new( "CONTENT" ), BorderLayout.Area.content )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "BorderLayout" )
	end
	
	/** \brief Create layout box layout. */
	private func void createBoxLayout( DefaultListModel modelLayouts )
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( GridLayout.new( 2, 1 ) )
			
			var Panel panel2 = Panel.new()
			panel2.runWhileBlockingLayout( block
				panel2.setLayout( GridLayout.new( 2, 1 ) )
				
				var Panel subpanel = Panel.new()
				subpanel.runWhileBlockingLayout( block
					subpanel.setDesignerSelector( "WindowLayouts.Panel1" )
					subpanel.setLayout( BoxLayout.new( LayoutAxis.y, 5 ) )
					subpanel.addWidget( Button.new( "Y_AXIS" ) )
					subpanel.addWidget( Button.new( "Test\nTest" ) )
					subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
					subpanel.addWidget( Button.new( "Test" ) )
				end )
				panel2.addWidget( subpanel )
				
				subpanel = Panel.new()
				subpanel.runWhileBlockingLayout( block
					subpanel.setDesignerSelector( "WindowLayouts.Panel3" )
					subpanel.setLayout( BoxLayout.new( LayoutAxis.inverseY, 5 ) )
					subpanel.addWidget( Button.new( "Y_AXIS_NEG" ) )
					subpanel.addWidget( Button.new( "Test\nTest" ) )
					subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
					subpanel.addWidget( Button.new( "Test" ) )
				end )
				panel2.addWidget( subpanel )
			end )
			panel.addWidget( panel2 )
			
			panel2 = Panel.new()
			panel2.runWhileBlockingLayout( block
				panel2.setLayout( GridLayout.new( 1, 2 ) )
				
				var Panel subpanel = Panel.new()
				subpanel.runWhileBlockingLayout( block
					subpanel.setDesignerSelector( "WindowLayouts.Panel4" )
					subpanel.setLayout( BoxLayout.new( LayoutAxis.x, 5 ) )
					subpanel.addWidget( Button.new( "X_AXIS" ) )
					subpanel.addWidget( Button.new( "Test\nTest" ) )
					subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
					subpanel.addWidget( Button.new( "Test" ) )
				end )
				panel2.addWidget( subpanel )
				
				subpanel = Panel.new()
				subpanel.runWhileBlockingLayout( block
					subpanel.setDesignerSelector( "WindowLayouts.Panel5" )
					subpanel.setLayout( BoxLayout.new( LayoutAxis.inverseX, 5 ) )
					subpanel.addWidget( Button.new( "X_AXIS_NEG" ) )
					subpanel.addWidget( Button.new( "Test\nTest" ) )
					subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
					subpanel.addWidget( Button.new( "Test" ) )
				end )
				panel2.addWidget( subpanel )
			end )
			panel.addWidget( panel2 )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "BoxLayout" )
	end
	
	/** \brief Create layout flow layout. */
	private func void createFlowLayoutX( DefaultListModel modelLayouts )
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( GridLayout.new( 1, 6 ) )
			
			var Panel subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.x, 5, FlowLayout.Stretch.none ) )
				subpanel.addWidget( Button.new( "X_AXIS" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "NONE" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel7" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.x, 5, FlowLayout.Stretch.last ) )
				subpanel.addWidget( Button.new( "X_AXIS" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "LAST" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel8" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.x, 5, FlowLayout.Stretch.first ) )
				subpanel.addWidget( Button.new( "FIRST" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "X_AXIS" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.inverseX, 5, FlowLayout.Stretch.none ) )
				subpanel.addWidget( Button.new( "X_AXIS_NEG" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "NONE" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel7" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.inverseX, 5, FlowLayout.Stretch.last ) )
				subpanel.addWidget( Button.new( "X_AXIS_NEG" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "LAST" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel8" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.inverseX, 5, FlowLayout.Stretch.first ) )
				subpanel.addWidget( Button.new( "FIRST" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "X_AXIS_NEG" ) )
			end )
			panel.addWidget( subpanel )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "FlowLayout X-Axis" )
	end
	
	/** \brief Create layout flow layout. */
	private func void createFlowLayoutY( DefaultListModel modelLayouts )
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( GridLayout.new( 6, 1 ) )
			
			var Panel subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel1" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.y, 5, FlowLayout.Stretch.none ) )
				subpanel.addWidget( Button.new( "Y_AXIS" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "NONE" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel4" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.y, 5, FlowLayout.Stretch.last ) )
				subpanel.addWidget( Button.new( "Y_AXIS" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "LAST" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel9" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.y, 5, FlowLayout.Stretch.first ) )
				subpanel.addWidget( Button.new( "FIRST" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "Y_AXIS" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel1" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.inverseY, 5, FlowLayout.Stretch.none ) )
				subpanel.addWidget( Button.new( "Y_AXIS_NEG" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "NONE" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel4" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.inverseY, 5, FlowLayout.Stretch.last ) )
				subpanel.addWidget( Button.new( "Y_AXIS_NEG" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "LAST" ) )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel9" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.inverseY, 5, FlowLayout.Stretch.first ) )
				subpanel.addWidget( Button.new( "FIRST" ) )
				subpanel.addWidget( Button.new( "Test\nTest" ) )
				subpanel.addWidget( Button.new( "Test\nTest\nTest" ) )
				subpanel.addWidget( Button.new( "Y_AXIS_NEG" ) )
			end )
			panel.addWidget( subpanel )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "FlowLayout Y-Axis" )
	end
	
	/** \brief Create layout centrized box layout. */
	private class CBLPlacementListener extends DefaultRangeModelListener
		public var WeakReference modelX, modelY
		public var Array panels
		
		public func new( RangeModel modelX, RangeModel modelY )
			this.modelX = WeakReference.new( modelX )
			modelX.addListener( this )
			this.modelY = WeakReference.new( modelY )
			modelY.addListener( this )
			this.panels = Array.new()
		end
		
		public func void valueChanged( RangeModel rangeModel )
			var float placementX = 0.01 * ( this.modelX.get() cast RangeModel ).getValue()
			var float placementY = 0.01 * ( this.modelY.get() cast RangeModel ).getValue()
			this.panels.forEach( block Panel each
				( each.getLayout() cast CentrizedBoxLayout ).setPlacementX( placementX )
				( each.getLayout() cast CentrizedBoxLayout ).setPlacementY( placementY )
				each.doLayout()
			end )
		end
	end
	
	private func void createCentrizedBoxLayout( DefaultListModel modelLayouts )
		var DefaultRangeModel modelPlacementX = DefaultRangeModel.new( 0, 100, 25, 50, 1 )
		var DefaultRangeModel modelPlacementY = DefaultRangeModel.new( 0, 100, 25, 50, 1 )
		var CBLPlacementListener placement = CBLPlacementListener.new( modelPlacementX, modelPlacementY )
		
		this.pPanelLayouts.addWidget( Panel.new( BorderLayout.new( 5 ), block Panel p
			p.addWidget( Panel.new( BoxLayout.new( LayoutAxis.x, 10 ), block Panel p2
				p2.addWidget( Panel.new( FlowLayout.new( LayoutAxis.x, 2, FlowLayout.Stretch.last ), block Panel p3
					p3.addWidget( Label.new( "Placement X:", Label.left ) )
					p3.addWidget( ScrollBar.new( Orientation.horizontal, modelPlacementX ) )
				end ) )
				p2.addWidget( Panel.new( FlowLayout.new( LayoutAxis.x, 2, FlowLayout.Stretch.last ), block Panel p3
					p3.addWidget( Label.new( "Placement Y:", Label.left ) )
					p3.addWidget( ScrollBar.new( Orientation.horizontal, modelPlacementY ) )
				end ) )
			end ), BorderLayout.Area.top )
			
			p.addWidget( Panel.new( GridLayout.new( 2, 1 ), block Panel p2
				p2.addWidget( Panel.new( GridLayout.new( 2, 1 ), block Panel p3
					p3.addWidget( Panel.new( CentrizedBoxLayout.new( LayoutAxis.y, 5 ), block Panel p4
						p4.setDesignerSelector( "WindowLayouts.Panel1" )
						p4.addWidget( Button.new( "Y_AXIS" ) )
						p4.addWidget( Button.new( "Test\nTest" ) )
						p4.addWidget( Button.new( "Test\nTest\nTest" ) )
						p4.addWidget( Button.new( "Test" ) )
						placement.panels.add( p4 )
					end ) )
					
					p3.addWidget( Panel.new( CentrizedBoxLayout.new( LayoutAxis.inverseY, 5 ), block Panel p4
						p4.setDesignerSelector( "WindowLayouts.Panel7" )
						p4.addWidget( Button.new( "Y_AXIS_NEG" ) )
						p4.addWidget( Button.new( "Test\nTest" ) )
						p4.addWidget( Button.new( "Test\nTest\nTest" ) )
						p4.addWidget( Button.new( "Test" ) )
						placement.panels.add( p4 )
					end ) )
				end ) )
				
				p2.addWidget( Panel.new( GridLayout.new( 1, 2 ), block Panel p3
					p3.addWidget( Panel.new( CentrizedBoxLayout.new( LayoutAxis.x, 5 ), block Panel p4
						p4.setDesignerSelector( "WindowLayouts.Panel4" )
						p4.addWidget( Button.new( "X_AXIS" ) )
						p4.addWidget( Button.new( "Test\nTest" ) )
						p4.addWidget( Button.new( "Test\nTest\nTest" ) )
						p4.addWidget( Button.new( "Test" ) )
						placement.panels.add( p4 )
					end ) )
					
					p3.addWidget( Panel.new( CentrizedBoxLayout.new( LayoutAxis.inverseX, 5 ), block Panel p4
						p4.setDesignerSelector( "WindowLayouts.Panel5" )
						p4.addWidget( Button.new( "X_AXIS_NEG" ) )
						p4.addWidget( Button.new( "Test\nTest" ) )
						p4.addWidget( Button.new( "Test\nTest\nTest" ) )
						p4.addWidget( Button.new( "Test" ) )
						placement.panels.add( p4 )
					end ) )
				end ) )
			end ), BorderLayout.Area.content )
		end ) )
		
		modelLayouts.add( "CentrizedBoxLayout" )
	end
	
	/** \brief Create layout fixed layout. */
	private func void createFixedLayout( DefaultListModel modelLayouts )
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( BoxLayout.new( LayoutAxis.x, 10 ) )
			
			var Panel subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel1" )
				subpanel.setLayout( FixedLayout.new() )
				
				var Button button = Button.new( "Button with fixed\nposition and size" )
				button.setPosition( Point.new( 50, 20 ) )
				button.setSize( Point.new( 300, 70 ) )
				subpanel.addWidget( button )
				
				button = Button.new( "Overlapping button" )
				button.setPosition( Point.new( 300, 50 ) )
				button.setSize( Point.new( 150, 60 ) )
				subpanel.addWidget( button )
				
				button = Button.new( "Some other button" )
				button.setPosition( Point.new( 80, 150 ) )
				button.setSize( Point.new( 200, 100 ) )
				subpanel.addWidget( button )
			end )
			panel.addWidget( subpanel )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "FixedLayout" )
	end
	
	/** \brief Create layout fixed layout. */
	private func void createFixedMinimumLayout( DefaultListModel modelLayouts )
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( BoxLayout.new( LayoutAxis.x, 10 ) )
			
			var Panel subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel1" )
				subpanel.setLayout( FixedMinimalLayout.new() )
				
				var Button button = Button.new( "Button with fixed\nposition" )
				button.setPosition( Point.new( 50, 20 ) )
				button.setSize( Point.new( 300, 70 ) ) // size will be ignored
				subpanel.addWidget( button )
				
				button = Button.new( "Another button" )
				button.setPosition( Point.new( 300, 50 ) )
				button.setSize( Point.new( 150, 60 ) ) // size will be ignored
				subpanel.addWidget( button )
				
				button = Button.new( "Some other button" )
				button.setPosition( Point.new( 80, 150 ) )
				button.setSize( Point.new( 200, 100 ) ) // size will be ignored
				subpanel.addWidget( button )
			end )
			panel.addWidget( subpanel )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "FixedMinimalLayout" )
	end
	
	/** \brief Create layout form layoutlayout. */
	private func void createFormLayout( DefaultListModel modelLayouts, bool stretchRight )
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( BoxLayout.new( LayoutAxis.x, 10 ) )
			
			var Panel subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel1" )
				subpanel.setLayout( FormLayout.new( stretchRight, 10, 5 ) )
				
				subpanel.addWidget( Label.new( "Short:", Label.middleLeft ) )
				subpanel.addWidget( TextField.new(), FormLayout.LayoutSettings.new( false ) )
				
				subpanel.addWidget( Label.new( "Longer:", Label.middleLeft ) )
				var TextField textField = TextField.new()
				textField.setDisplayCharCount( textField.getDisplayCharCount() + 5 )
				subpanel.addWidget( textField, FormLayout.LayoutSettings.new( false ) )
				
				subpanel.addWidget( Label.new( "Full width:", Label.middleLeft ) )
				subpanel.addWidget( TextField.new() )
				
				subpanel.addWidget( Label.new( "Row stretch:", Label.topLeft ) )
				subpanel.addWidget( TextArea.new(), FormLayout.LayoutSettings.new( true, true ) )
				
				subpanel.addWidget( Label.new( "Short but long label:", Label.middleLeft ) )
				subpanel.addWidget( TextField.new(), FormLayout.LayoutSettings.new( false ) )
				
				subpanel.addWidget( Label.new( "Another row stretch:", Label.topLeft ) )
				subpanel.addWidget( TextArea.new(), FormLayout.LayoutSettings.new( true, true ) )
				
				subpanel.addWidget( Label.new( "Final short:", Label.middleLeft ) )
				subpanel.addWidget( TextField.new(), FormLayout.LayoutSettings.new( false ) )
			end )
			panel.addWidget( subpanel )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		
		if stretchRight
			modelLayouts.add( "FormLayout (stretch right)" )
			
		else
			modelLayouts.add( "FormLayout (stretch left)" )
		end
	end
	
	/** \brief Create layout grid layout. */
	private func void createGridLayout( DefaultListModel modelLayouts )
		var Panel panel = Panel.new()
		var int i
		
		panel.runWhileBlockingLayout( block
			panel.setLayout( BorderLayout.new( 10 ) )
			
			// fix column and row count
			var Panel subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel1" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.y, 5, FlowLayout.Stretch.last ) )
				subpanel.addWidget( Label.new( "Fix Size Grid" ) )
				
				var Panel subpanel2 = Panel.new()
				subpanel2.runWhileBlockingLayout( block
					subpanel2.setLayout( GridLayout.new( 4, 4, 5 ) )
					for i = 0 to 16
						subpanel2.addWidget( Button.new( "" + ( i + 1 ) ) )
					end
				end )
				subpanel.addWidget( subpanel2 )
			end )
			panel.addWidget( subpanel, BorderLayout.Area.content )
			
			// fix column count with variable row count
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel4" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.y, 5, FlowLayout.Stretch.last ) )
				subpanel.addWidget( Label.new( "Dynamic Rows" ) )
				
				var Panel subpanel2 = Panel.new()
				subpanel2.runWhileBlockingLayout( block
					subpanel2.setLayout( GridLayout.new( 4, 0, 5 ) )
					for i = 0 to 11
						subpanel2.addWidget( Button.new( "" + ( i + 1 ) ) )
					end
				end )
				subpanel.addWidget( subpanel2 )
			end )
			panel.addWidget( subpanel, BorderLayout.Area.top )
			
			// variable column count with fix row count
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( FlowLayout.new( LayoutAxis.y, 5, FlowLayout.Stretch.last ) )
				subpanel.addWidget( Label.new( "Dynamic Columns" ) )
				
				var Panel subpanel2 = Panel.new()
				subpanel2.runWhileBlockingLayout( block
					subpanel2.setLayout( GridLayout.new( 0, 4, 5 ) )
					for i = 0 to 11
						subpanel2.addWidget( Button.new( "" + ( i + 1 ) ) )
					end
				end )
				subpanel.addWidget( subpanel2 )
			end )
			panel.addWidget( subpanel, BorderLayout.Area.right )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "GridLayout" )
	end
	
	/** \brief Create weight layout. */
	private func void createWeightLayoutX( DefaultListModel modelLayouts )
		var WeightLayout.LayoutSettings layout1 = WeightLayout.LayoutSettings.new( 1 )
		var WeightLayout.LayoutSettings layout2 = WeightLayout.LayoutSettings.new( 2 )
		var WeightLayout.LayoutSettings layout3 = WeightLayout.LayoutSettings.new( 3 )
		var WeightLayout.LayoutSettings layout4 = WeightLayout.LayoutSettings.new( 0, 50 )
		
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( FlowLayout.new( LayoutAxis.y, 10, FlowLayout.Stretch.none ) )
			
			var Panel subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.x, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.x, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.x, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.x, 5 ) )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel7" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.inverseX, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel8" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.x, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.inverseX, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
			end )
			panel.addWidget( subpanel )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "WeightLayout X-Axis" )
	end
	
	/** \brief Create weight layout. */
	private func void createWeightLayoutY( DefaultListModel modelLayouts )
		var WeightLayout.LayoutSettings layout1 = WeightLayout.LayoutSettings.new( 1 )
		var WeightLayout.LayoutSettings layout2 = WeightLayout.LayoutSettings.new( 2 )
		var WeightLayout.LayoutSettings layout3 = WeightLayout.LayoutSettings.new( 3 )
		var WeightLayout.LayoutSettings layout4 = WeightLayout.LayoutSettings.new( 0, 50 )
		
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( FlowLayout.new( LayoutAxis.x, 10, FlowLayout.Stretch.none ) )
			
			var Panel subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.y, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel7" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.inverseY, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel8" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.y, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
			end )
			panel.addWidget( subpanel )
			
			subpanel = Panel.new()
			subpanel.runWhileBlockingLayout( block
				subpanel.setDesignerSelector( "WindowLayouts.Panel6" )
				subpanel.setLayout( WeightLayout.new( LayoutAxis.inverseY, 5 ) )
				subpanel.addWidget( Button.new( "Weight 1" ), layout1 )
				subpanel.addWidget( Button.new( "Weight 2" ), layout2 )
				subpanel.addWidget( Button.new( "Fixed" ), layout4 )
				subpanel.addWidget( Button.new( "Weight 3" ), layout3 )
			end )
			panel.addWidget( subpanel )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "WeightLayout Y-Axis" )
	end
	
	
	
	/** \brief Create box layout with overflowing labels. */
	private func void createLabelBoxLayoutY( DefaultListModel modelLayouts )
		var Panel panel = Panel.new()
		panel.runWhileBlockingLayout( block
			panel.setLayout( BoxLayout.new( LayoutAxis.y, 5 ) )
			
			var Label label = Label.new( "Lorem ipsum dolor sit amet, consectetur adipiscing elit." + \
				" Sed dictum nulla a odio facilisis, eget egestas leo lacinia. Vestibulum rhoncus dolor" + \
				" ac mollis tempor. Aenean varius augue eget enim auctor, vel condimentum dui faucibus." + \
				" Nulla nec neque nunc. Phasellus sollicitudin elementum libero, et pellentesque nunc eleifend id." )
			label.setWordWrap( true )
			label.setDesignerSelector( "WindowLayouts.Panel10" )
			panel.addWidget( label )
			
			label = Label.new( "Lorem ipsum dolor sit amet, consectetur adipiscing elit." + \
				" Sed dictum nulla a odio facilisis, eget egestas leo lacinia." )
			label.setWordWrap( true )
			label.setDesignerSelector( "WindowLayouts.Panel11" )
			panel.addWidget( label )
		end )
		
		this.pPanelLayouts.addWidget( panel )
		modelLayouts.add( "Label Flow Y: BoxLayout" )
	end
end
