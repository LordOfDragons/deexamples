/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Events
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief DragonScript test project canvas window.
 */
class WindowCanvas extends Window
	/** \brief Create game. */
	public func new() super( 0, 0, 630, 460 )
		this.setDesignerSelector( "WindowPadding" )
		this.setTitle( "Canvas View" )
		this.createContent( this )
	end
	
	
	
	/** \brief Add content. */
	private func void createContent( Container content )
		var Point padding = Point.new( 10, 10 )
		var Point size = Point.new( 200, 200 )
		
		content.setLayout( FixedLayout.new() )
		
		// real panel with active widgets. real panel requires a background canvas creator to
		// be present otherwise the copied content has artifacts. this happens because without
		// background canvas creator the area is undefined
		var Panel realPanel = Panel.new()
		realPanel.setLayout( FlowLayout.new( LayoutAxis.y, 3 ) )
		realPanel.setSize( size )
		realPanel.setPosition( padding )
		realPanel.setDesignerSelector( "PanelWithBackground" )
		
		var Label label = Label.new( "Upper left is the real panel with active widgets. The others are canvas view rendering" )
		label.setMaximalWidth( 200 )
		label.setWordWrap( true )
		realPanel.addWidget( label )
		realPanel.addWidget( TextField.new( DefaultTextModel.new( "Enter some text" ) ) )
		realPanel.addWidget( Button.new( "I do nothing" ) )
		
		realPanel.addWidget( ScrollPanel.new( TextArea.new( DefaultTextModel.new( "Enter some text" ) ) ) )
		
		content.addWidget( realPanel )
		
		// canvas view of same size
		var DisplayCanvas displayCanvas = DisplayCanvas.new( realPanel.getCanvasWidget(), RepeatMode.stretch )
		displayCanvas.setSize( size )
		displayCanvas.setPosition( padding + Point.new( 0, size.getY() + 10 ) )
		displayCanvas.setDesignerSelector( "BorderBlue2px" )
		content.addWidget( displayCanvas )
		
		// canvas view of double size
		displayCanvas = DisplayCanvas.new( realPanel.getCanvasWidget(), RepeatMode.stretch )
		displayCanvas.setSize( size * 2 )
		displayCanvas.setPosition( padding + Point.new( size.getX() + 10, 0 ) )
		displayCanvas.setDesignerSelector( "BorderBlue2px" )
		content.addWidget( displayCanvas )
	end
end
