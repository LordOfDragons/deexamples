/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland (roland@rptd.dnsalias.net)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave



/**
 * \brief DragonScript test project guitheme window.
 */
class WindowGuiTheme extends Window
	/** \brief Named gui theme. */
	public class NamedGuiTheme
		/** \brief Name. */
		private var String pName
		
		/** \brief Gui theme. */
		private var GuiTheme pGuiTheme
		
		/** \brief Create named gui theme. */
		public func new(String name, GuiTheme guitheme)
			pName = name
			pGuiTheme = guitheme
		end
		
		/** \brief Name. */
		public func String getName()
			return pName
		end
		
		/** \brief Gui theme. */
		public func GuiTheme getGuiTheme()
			return pGuiTheme
		end
		
		/** \brief String representation. */
		public func String toString()
			return pName
		end
	end
	
	/** \brief Gui theme selection listener. */
	public class SelectionListenerGuiTheme extends DefaultListModelListener
		/** \brief Window. */
		private var WindowGuiTheme pWindow
		
		/** \brief Create selection listener. */
		public func new(WindowGuiTheme window)
			pWindow = window
		end
		
		/** \brief Selection changed. */
		public func void selectionChanged(ListModel listModel)
			pWindow.updateGuiTheme()
		end
	end
	
	/** \brief Popup test action. */
	class ActionPopupTest extends DefaultActionListener
		class ActionPopdown extends DefaultActionListener
			private var WindowPopup pPopup
			public func new(WindowPopup popup)
				pPopup = popup
			end
			public func void onAction(ActionEvent event)
				pPopup.popdown()
			end
		end
		
		private var WindowGuiTheme pWindow
		public func new(WindowGuiTheme window)
			pWindow = window
		end
		public func void onAction(ActionEvent event)
			var Desktop desktop = pWindow.getDesktop()
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = pWindow.createMenuPopup1()
			
			desktop.addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
			menu.setGuiTheme(pWindow.getGuiTheme())
		end
	end
	
	/** Log message. */
	class LogMessage implements ConsoleListener
		public func new()
		end
		
		public func void messageAdded(Console console, ConsoleMessage message, bool removedTop)
			BaseGameApp.getApp().getConsole().addMessage(message.getMessage())
		end
		
		public func void consoleCleared(Console console)
		end
	end
	
	/** \brief Enable/disable check/option button action listener. */
	class ListenerEnableButtons extends DefaultToggleModelListener
		private var Array pWidgets
		
		public func new()
			pWidgets = Array.new()
		end
		
		public func void addWidget(Widget widget)
			pWidgets.add(widget)
		end
		
		public func void toggledChanged(ToggleModel model)
			var bool enabled = not model.getToggled()
			pWidgets.forEach(block Widget each
				each.setEnabled(enabled)
			end)
		end
	end
	
	/** \brief Dialog window test action. */
	class ActionDialogTest extends DefaultActionListener
		class EchoResult implements WindowDialog.ResultListener
			private var WindowModal pWindow
			
			public func new(WindowModal window)
				pWindow = window
			end
			
			public func void onResult(Object result)
				WindowDialog.message(pWindow, "Result", "Result: " + result, null, null, null) \
					.setGuiTheme(pWindow.getGuiTheme())
			end
		end
		
		class ActionMessageBox implements ActionListener
			private var WindowModal pWindow
			
			public func new(WindowModal window)
				pWindow = window
			end
			
			public func void onAction(ActionEvent event)
				WindowDialog.message(pWindow, "Message Box", \
					"This is a message to fill the message box with. It has multiple lines wrapping around.", \
					null, null, null) \
						.setGuiTheme(pWindow.getGuiTheme())
			end
		end
		
		class ActionQuestionBox implements ActionListener
			private var WindowModal pWindow
			
			public func new(WindowModal window)
				pWindow = window
			end
			
			public func void onAction(ActionEvent event)
				WindowDialog.question(pWindow, "Question Box", \
					"Shows a question box asking the user what to do next." \
						+ " The buttons can be customized." \
						+ " Press a button to see the result it sets.", \
					null, Array.newWith(\
						WindowDialog.ButtonConfiguration.new("Number", 8), \
						WindowDialog.ButtonConfiguration.new("String", "A string result"), \
						WindowDialog.ButtonConfiguration.new("Boolean", true), \
						WindowDialog.ButtonConfiguration.new("Float", 2.6), \
						WindowDialog.ButtonConfiguration.new("Null", null)), \
					EchoResult.new(pWindow)) \
						.setGuiTheme(pWindow.getGuiTheme())
			end
		end
		
		class ActionSmallChooseBox implements ActionListener
			private var WindowModal pWindow
			
			public func new(WindowModal window)
				pWindow = window
			end
			
			public func void onAction(ActionEvent event)
				WindowDialog.choose(pWindow, "Choose", \
					"Choose box using option boxes for each element." \
					+ " Useful for small list of options to select from.", \
					null, Array.newWith("I want a number", "A String please, nothing else", \
						"A boolean is also fine", "What about a floating point value?", \
						"Null... just null"), 1, null, null, EchoResult.new(pWindow)) \
							.setGuiTheme(pWindow.getGuiTheme())
			end
		end
		
		class ActionLargeChooseBox implements ActionListener
			private var WindowModal pWindow
			
			public func new(WindowModal window)
				pWindow = window
			end
			
			public func void onAction(ActionEvent event)
				var DefaultListModel elements = DefaultListModel.new()
				var int i
				for i = 0 to 50
					elements.add("Element with index " + i)
				end
				elements.setSelected(3)
				
				WindowDialog.chooseList(pWindow, "Choose", \
					"Choose box using list box for each element." \
					+ " Useful for large list of options to select from.", \
					null, elements, DefaultListElementRenderer.new(), \
					null, null, EchoResult.new(pWindow)) \
						.setGuiTheme(pWindow.getGuiTheme())
			end
		end
		
		class ActionSelectionBox implements ActionListener
			private var WindowModal pWindow
			
			public func new(WindowModal window)
				pWindow = window
			end
			
			public func void onAction(ActionEvent event)
				WindowDialog.selection(pWindow, "Selection", \
					"Selection box using check boxes for each element." \
					+ " Useful for small list of options to select.", \
					null, Array.newWith("I want a number", "A String please, nothing else", \
						"A boolean is also fine", "What about a floating point value?", \
						"Null... just null"), \
					Array.newWith(0, 3), null, null, EchoResult.new(pWindow)) \
						.setGuiTheme(pWindow.getGuiTheme())
			end
		end
		
		class ActionInputBox implements ActionListener
			private var WindowModal pWindow
			
			public func new(WindowModal window)
				pWindow = window
			end
			
			public func void onAction(ActionEvent event)
				WindowDialog.input(pWindow, "Input", "Input test.", \
					null, "Initial Text", null, null, EchoResult.new(pWindow)) \
						.setGuiTheme(pWindow.getGuiTheme())
			end
		end
		
		
		
		private var WindowGuiTheme pWindow
		
		public func new(WindowGuiTheme window)
			pWindow = window
		end
		
		public func void onAction(ActionEvent event)
			var WindowModal window = WindowModal.new()
			
			window.runWhileBlockingLayout(block
				window.setGuiTheme(pWindow.getGuiTheme())
				
				window.setTitle("Modal Window")
				
				var Button button = Button.new("Message Box")
				button.addActionListener(ActionMessageBox.new(window))
				window.addWidget(button)
				
				button = Button.new("Question Box")
				button.addActionListener(ActionQuestionBox.new(window))
				window.addWidget(button)
				
				button = Button.new("Small Choose Box")
				button.addActionListener(ActionSmallChooseBox.new(window))
				window.addWidget(button)
				
				button = Button.new("Large Choose Box")
				button.addActionListener(ActionLargeChooseBox.new(window))
				window.addWidget(button)
				
				button = Button.new("Selection Box")
				button.addActionListener(ActionSelectionBox.new(window))
				window.addWidget(button)
				
				button = Button.new("Input Box")
				button.addActionListener(ActionInputBox.new(window))
				window.addWidget(button)
			end)
			
			window.show(pWindow, WindowModal.Placement.window)
		end
	end
	
	
	
	/** \brief Create window. */
	public func new() super(0, 0, 500, 500)
		pModelCheck1 = DefaultToggleModel.new()
		pModelCheck2 = DefaultToggleModel.new()
		pModelCheck3 = DefaultToggleModel.new()
		
		pModelOptions = DefaultListModel.new()
		pModelOptions.add(BaseGameApp.CollisionFilterBit.actor)
		pModelOptions.add(BaseGameApp.CollisionFilterBit.geometry)
		pModelOptions.add(BaseGameApp.CollisionFilterBit.trigger)
		pModelOptions.setSelectedElement(BaseGameApp.CollisionFilterBit.geometry)
		
		setTitle("GuiTheme")
		createModelGuiThemes()
		createContent(this)
	end
	
	/** \brief Dispose of window. */
	public func void dispose()
		pModelGuiThemes = null
		pComboBoxGuiThemes = null
		pModelCheck1 = null
		pModelCheck2 = null
		pModelCheck3 = null
		super.dispose()
	end
	
	
	
	/** \brief Gui theme list model. */
	private var DefaultListModel pModelGuiThemes
	
	/** \brief Gui theme combo box. */
	private var ComboBox pComboBoxGuiThemes
	
	public var DefaultToggleModel pModelCheck1
	public var DefaultToggleModel pModelCheck2
	public var DefaultToggleModel pModelCheck3
	
	public var DefaultListModel pModelOptions
	
	
	
	/** \brief Update gui theme. */
	public func void updateGuiTheme()
		setGuiTheme((pModelGuiThemes.getAt(\
			pComboBoxGuiThemes.getSelectedElement()) cast NamedGuiTheme).getGuiTheme())
	end
	
	/** \brief Create gui theme model. */
	private func void createModelGuiThemes()
		var Console console = Console.new(20)
		console.addListener(LogMessage.new())
		var LoadGuiTheme loadGuiTheme = TestProject.getApp().getLoaders().getGuiTheme()
		
		pModelGuiThemes = DefaultListModel.new()
		pModelGuiThemes.add(NamedGuiTheme.new("Simple", loadGuiTheme.loadFromFile(\
			"/shareddata/guithemes/simple/simple.guitheme.xml")))
		pModelGuiThemes.add(NamedGuiTheme.new("Modern", loadGuiTheme.loadFromFile(\
			"/shareddata/guithemes/modern/modern.guitheme.xml")))
	end
	
	
	
	/** \brief Add content. */
	private func void createContent(Container content)
		content.setLayout(BorderLayout.new(5))
		
		// menu bar
		content.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p
			createMenuBar(p)
		end), BorderLayout.Area.top)
		
		// window content
		content.addWidget(Panel.new(BorderLayout.new(5), block Panel wcp
			// we use engine provided gui themes which do not have a designer for
			// window content panel to define padding. if the padding is defined
			// using script code then protecting is required for the default widget
			// designer to not chang it
			wcp.setPadding(BorderSize.new(10))
			wcp.setProtectPadding(true)
			
			// gui theme selection
			wcp.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p
				p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 10, FlowLayout.Stretch.last), block Panel p2
					pComboBoxGuiThemes = ComboBox.new(pModelGuiThemes)
					pComboBoxGuiThemes.setSelectedElement(pModelGuiThemes.getCount() - 1)
					pComboBoxGuiThemes.setNumberDisplayLines(5)
					pModelGuiThemes.addListener(SelectionListenerGuiTheme.new(this))
					p2.addWidget(Label.new("Gui Theme:"))
					p2.addWidget(pComboBoxGuiThemes)
				end))
			end), BorderLayout.Area.top)
			
			// test widgets
			wcp.addWidget(Panel.new(BorderLayout.new(5), block Panel p
				// test models
				var RangeModel modelScroll = DefaultRangeModel.new(0, 20, 5, 6, 1)
				var RangeModel modelScroll2 = DefaultRangeModel.new(0, 40, 10, 12, 1)
				var RangeModel modelProgress = DefaultRangeModel.new(0, 100, 20, 30, 1)
				var TextModel textModel = DefaultTextModel.new("Shared text")
				var Image imageColorful = Image.new("/images/colorful.png")
				
				// right border
				p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x), block Panel p2
					p2.addWidget(ScrollBar.new(Orientation.vertical, modelScroll))
					p2.addWidget(Slider.new(Orientation.vertical, modelScroll))
				end), BorderLayout.Area.right)
				
				// left border
				p.addWidget(ScrollBar.new(Orientation.vertical, modelScroll), BorderLayout.Area.left)
				
				// bottom border
				p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p2
					p2.addWidget(ScrollBar.new(Orientation.horizontal, modelScroll2))
					p2.addWidget(Slider.new(Orientation.horizontal, modelScroll2))
				end), BorderLayout.Area.bottom)
				
				// content
				p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y, 2, FlowLayout.Stretch.last), block Panel p2
					p2.addWidget(ScrollBar.new(Orientation.horizontal, modelProgress))
					
					p2.addWidget(ProgressBar.new(Orientation.horizontal, modelProgress))
					
					p2.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 5, FlowLayout.Stretch.last), block Panel p3
						//var IntegerTextField integerText = IntegerTextField.new(RangeTextModel.new(modelProgress))
						var TextField integerText = TextField.new()
						integerText.setDisplayCharCount(3)
						integerText.setValidator(SimpleTextValidator.new(3, SimpleTextValidator.CharacterClass.digits))
						p3.addWidget(integerText)
						
						p3.addWidget(SpinButton.new(modelProgress))
						
						p3.addWidget(ProgressBar.new(Orientation.horizontal, modelProgress))
					end))
					
					p2.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 5), block Panel p3
						p3.addWidget(TextField.new(textModel))
						setActiveWidget(p3.getWidget(p3.getWidgetCount() - 1))
						
						var TextField textField = TextField.new(textModel)
						textField.setEnabled(false)
						p3.addWidget(textField)
					end))
					
					p2.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 5),  block Panel p3
						p3.addWidget(TextField.new(textModel))
						
						p3.addWidget(TextField.new(textModel, true))
					end))
					
					p2.addWidget(Panel.new(BorderLayout.new(5), block Panel p3
						p3.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 5), block Panel p4
							p4.addWidget(Button.new("Popup", imageColorful, ActionPopupTest.new(this)))
							p4.addWidget(Button.new("Modal", imageColorful, ActionDialogTest.new(this)))
							
							var Button button = Button.new("Disabled", imageColorful)
							button.setEnabled(false)
							p4.addWidget(button)
						end), BorderLayout.Area.content)
						
						p3.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 5), block Panel p4
							p4.addWidget(ToggleButton.new("Toggle", imageColorful))
						end), BorderLayout.Area.right)
					end))
					
					p2.addWidget(Panel.new(GridLayout.new(3, 2, 5), block Panel p3
						var ListenerEnableButtons listenerEnableButtons = ListenerEnableButtons.new()
						pModelCheck2.addListener(listenerEnableButtons)
						
						p3.addWidget(CheckBox.new(pModelCheck1, "Check box 1"))
						p3.addWidget(CheckBox.new(pModelCheck2, "Disable"))
						
						var CheckBox checkBox = CheckBox.new(pModelCheck3, "Check box 3")
						p3.addWidget(checkBox)
						listenerEnableButtons.addWidget(checkBox)
						
						p3.addWidget(OptionBox.new(OptionGroupModel.newFor(\
							pModelOptions, BaseGameApp.CollisionFilterBit.actor), "Option 1"))
						p3.addWidget(OptionBox.new(OptionGroupModel.newFor(\
							pModelOptions, BaseGameApp.CollisionFilterBit.geometry), "Option 2"))
						p3.addWidget(OptionBox.new(OptionGroupModel.newFor(\
							pModelOptions, BaseGameApp.CollisionFilterBit.trigger), "Option 3"))
					end))
					
					var TextArea textArea = TextArea.new(DefaultTextModel.new("Multiline Text\nAnother line\nAnd one more"))
					textArea.setMaximalWidth(50)
					textArea.setRowCount(3)
					p2.addWidget(ScrollPanel.new(textArea))
				end), BorderLayout.Area.content)
			end), BorderLayout.Area.content)
		end), BorderLayout.Area.content)
	end
	
	/** Create menu bar. */
	private func void createMenuBar(Container container)
		var Image icon1 = Image.new("/images/icons/menu_icon1.png")
		
		container.addWidget(MenuBar.new(block MenuBar bar
			bar.addWidget(MenuBarItem.new("No Icon", createMenuPopup1()))
			bar.addWidget(MenuBarItem.new(icon1, "With Icon", createMenuPopup1()))
			bar.addWidget(MenuBarItem.new("Another", createMenuPopup1()))
		end))
	end
	
	/** Create menu popup 1. */
	public func MenuPopup createMenuPopup1()
		var Image icon1 = Image.new("/images/icons/menu_icon1.png")
		var Image icon2 = Image.new("/images/icons/menu_icon2.png")
		var Image icon3 = Image.new("/images/icons/menu_icon3.png")
		
		var MenuPopup menu = MenuPopup.new()
		menu.addWidget(MenuItemCommand.new("Command No Icon"))
		menu.addWidget(MenuItemCommand.new(icon1, "Command With Icon"))
		menu.addWidget(MenuItemSeparator.new())
		
		var MenuPopup subMenu = MenuPopup.new()
		subMenu.addWidget(MenuItemCommand.new("Command 1"))
		subMenu.addWidget(MenuItemCommand.new("Command 2 and more"))
		subMenu.addWidget(MenuItemCommand.new("Command 3 or so"))
		menu.addWidget(MenuItemSubMenu.new("Sub Menu 1", subMenu))
		
		subMenu = MenuPopup.new()
		subMenu.addWidget(MenuItemCommand.new(icon1, "Command 1"))
		subMenu.addWidget(MenuItemCommand.new("Command 2 and more"))
		subMenu.addWidget(MenuItemCommand.new(icon3, "Command 3 or so"))
			
			var MenuPopup subMenu2 = MenuPopup.new()
			subMenu2.addWidget(MenuItemCommand.new("Another Command"))
			subMenu2.addWidget(MenuItemCommand.new("Some more for you"))
			subMenu2.addWidget(MenuItemCommand.new("Really? Another?"))
			subMenu.addWidget(MenuItemSubMenu.new("Nested Sub Menu", subMenu2))
		
		menu.addWidget(MenuItemSubMenu.new(icon1, "Sub Menu 2", subMenu))
		menu.addWidget(MenuItemSeparator.new())
		
		menu.addWidget(MenuItemCheck.new(pModelCheck1, "Check No Icon"))
		menu.addWidget(MenuItemCheck.new(pModelCheck2, icon2, "Check With Icon"))
		
		var MenuItemCheck menuItemCheck = MenuItemCheck.new(pModelCheck3, "Check Enable")
		menuItemCheck.setEnabled(not pModelCheck2.getToggled())
		menu.addWidget(menuItemCheck)
		menu.addWidget(MenuItemSeparator.new())
		
		menu.addWidget(MenuItemOption.new(OptionGroupModel.new(pModelOptions, 0), "Option No Icon"))
		menu.addWidget(MenuItemOption.new(OptionGroupModel.new(pModelOptions, 1), icon2, "Option With Icon"))
		menu.addWidget(MenuItemOption.new(OptionGroupModel.new(pModelOptions, 2), icon3, "Option 3 With Icon"))
		
		return menu
	end
end
