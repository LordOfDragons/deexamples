/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, PlÃ¼ss Roland ( roland@rptd.dnsalias.net )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave



/**
 * \brief DragonScript test project guitheme window.
 */
class WindowGuiTheme extends Window
	/** \brief Named gui theme. */
	public class NamedGuiTheme
		/** \brief Name. */
		private var String pName
		
		/** \brief Gui theme. */
		private var GuiTheme pGuiTheme
		
		/** \brief Create named gui theme. */
		public func new( String name, GuiTheme guitheme )
			this.pName = name
			this.pGuiTheme = guitheme
		end
		
		/** \brief Name. */
		public func String getName()
			return this.pName
		end
		
		/** \brief Gui theme. */
		public func GuiTheme getGuiTheme()
			return this.pGuiTheme
		end
		
		/** \brief String representation. */
		public func String toString()
			return this.pName
		end
	end
	
	/** \brief Gui theme selection listener. */
	public class SelectionListenerGuiTheme extends DefaultListModelListener
		/** \brief Window. */
		private var WindowGuiTheme pWindow
		
		/** \brief Create selection listener. */
		public func new( WindowGuiTheme window )
			this.pWindow = window
		end
		
		/** \brief Selection changed. */
		public func void selectionChanged( ListModel listModel )
			this.pWindow.updateGuiTheme()
		end
	end
	
	/** \brief Popup test action. */
	class ActionPopupTest extends DefaultActionListener
		class ActionPopdown extends DefaultActionListener
			private var WindowPopup pPopup
			public func new( WindowPopup popup )
				this.pPopup = popup
			end
			public func void onAction( ActionEvent event )
				this.pPopup.popdown()
			end
		end
		
		private var WindowGuiTheme pWindow
		public func new( WindowGuiTheme window )
			this.pWindow = window
		end
		public func void onAction( ActionEvent event )
			var Desktop desktop = this.pWindow.getDesktop()
			var Widget widget = event.getSource() cast Widget
			var WindowPopup window = WindowPopup.new()
			
			var Button button = Button.new( "First Label" )
			button.addActionListener( ActionPopdown.new( window ) )
			window.addWidget( button )
			
			button = Button.new( "Second Label" )
			button.addActionListener( ActionPopdown.new( window ) )
			window.addWidget( button )
			
			button = Button.new( "Third Label >" )
			button.addActionListener( ActionPopdown.new( window ) )
			window.addWidget( button )
			
			button = Button.new( "Last Label" )
			button.addActionListener( ActionPopdown.new( window ) )
			window.addWidget( button )
			
			desktop.addWindow( window )
			window.popup( widget.getDesktopPosition() + Point.new( 0, widget.getHeight() ) )
		end
	end
	
	/** Log message. */
	class LogMessage implements ConsoleListener
		public func new()
		end
		
		public func void messageAdded( Console console, ConsoleMessage message, bool removedTop )
			BaseGameApp.getApp().getConsole().addMessage( message.getMessage() )
		end
		
		public func void consoleCleared( Console console )
		end
	end
	
	/** \brief Enable/disable check/option button action listener. */
	class ActionEnableButtons extends DefaultActionListener
		private var Array pWidgets
		private var ToggleButton pTriggerButton
		public func new()
			this.pWidgets = Array.new()
		end
		public func void addWidget( Widget widget )
			this.pWidgets.add( widget )
		end
		public func void setTriggerButton( ToggleButton button )
			this.pTriggerButton = button
		end
		public func void onAction( ActionEvent event )
			var bool enabled = not this.pTriggerButton.getToggled()
			this.pWidgets.forEach( block Widget each
				each.setEnabled( enabled )
			end )
		end
	end
	
	/** \brief Dialog window test action. */
	class ActionDialogTest extends DefaultActionListener
		class EchoResult implements WindowDialog.ResultListener
			private var WindowModal pWindow
			
			public func new( WindowModal window )
				this.pWindow = window
			end
			
			public func void onResult( Object result )
				WindowDialog.message( this.pWindow, "Result", "Result: " + result, \
					null, null, null ) \
						.setGuiTheme( this.pWindow.getGuiTheme() )
			end
		end
		
		class ActionMessageBox implements ActionListener
			private var WindowModal pWindow
			
			public func new( WindowModal window )
				this.pWindow = window
			end
			
			public func void onAction( ActionEvent event )
				WindowDialog.message( this.pWindow, "Message Box", \
					"This is a message to fill the message box with. It has multiple lines wrapping around.", \
					null, null, null ) \
						.setGuiTheme( this.pWindow.getGuiTheme() )
			end
		end
		
		class ActionQuestionBox implements ActionListener
			private var WindowModal pWindow
			
			public func new( WindowModal window )
				this.pWindow = window
			end
			
			public func void onAction( ActionEvent event )
				WindowDialog.question( this.pWindow, "Question Box", \
					"Shows a question box asking the user what to do next." \
						+ " The buttons can be customized." \
						+ " Press a button to see the result it sets.", \
					null, Array.newWith( \
						WindowDialog.ButtonConfiguration.new( "Number", 8 ), \
						WindowDialog.ButtonConfiguration.new( "String", "A string result" ), \
						WindowDialog.ButtonConfiguration.new( "Boolean", true ), \
						WindowDialog.ButtonConfiguration.new( "Float", 2.6 ), \
						WindowDialog.ButtonConfiguration.new( "Null", null ) ), \
					EchoResult.new( this.pWindow ) ) \
						.setGuiTheme( this.pWindow.getGuiTheme() )
			end
		end
		
		class ActionSmallChooseBox implements ActionListener
			private var WindowModal pWindow
			
			public func new( WindowModal window )
				this.pWindow = window
			end
			
			public func void onAction( ActionEvent event )
				WindowDialog.choose( this.pWindow, "Choose", \
					"Choose box using option boxes for each element." \
					+ " Useful for small list of options to select from.", \
					null, Array.newWith( "I want a number", "A String please, nothing else", \
						"A boolean is also fine", "What about a floating point value?", \
						"Null... just null" ), 1, null, null, EchoResult.new( this.pWindow ) ) \
							.setGuiTheme( this.pWindow.getGuiTheme() )
			end
		end
		
		class ActionLargeChooseBox implements ActionListener
			private var WindowModal pWindow
			
			public func new( WindowModal window )
				this.pWindow = window
			end
			
			public func void onAction( ActionEvent event )
				var DefaultListModel elements = DefaultListModel.new()
				var int i
				for i = 0 to 50
					elements.add( "Element with index " + i )
				end
				elements.setSelected( 3 )
				
				WindowDialog.chooseList( this.pWindow, "Choose", \
					"Choose box using list box for each element." \
					+ " Useful for large list of options to select from.", \
					null, elements, DefaultListElementRenderer.new(), \
					null, null, EchoResult.new( this.pWindow ) ) \
						.setGuiTheme( this.pWindow.getGuiTheme() )
			end
		end
		
		class ActionSelectionBox implements ActionListener
			private var WindowModal pWindow
			
			public func new( WindowModal window )
				this.pWindow = window
			end
			
			public func void onAction( ActionEvent event )
				WindowDialog.selection( this.pWindow, "Selection", \
					"Selection box using check boxes for each element." \
					+ " Useful for small list of options to select.", \
					null, Array.newWith( "I want a number", "A String please, nothing else", \
						"A boolean is also fine", "What about a floating point value?", \
						"Null... just null" ), \
					Array.newWith( 0, 3 ), null, null, EchoResult.new( this.pWindow ) ) \
						.setGuiTheme( this.pWindow.getGuiTheme() )
			end
		end
		
		
		
		private var WindowGuiTheme pWindow
		
		public func new( WindowGuiTheme window )
			this.pWindow = window
		end
		
		public func void onAction( ActionEvent event )
			var Desktop desktop = this.pWindow.getDesktop()
			var WindowModal window = WindowModal.new()
			
			window.runWhileBlockingLayout( block
				window.setGuiTheme( this.pWindow.getGuiTheme() )
				
				window.setTitle( "Modal Window" )
				
				var Button button = Button.new( "Message Box" )
				button.addActionListener( ActionMessageBox.new( window ) )
				window.addWidget( button )
				
				button = Button.new( "Question Box" )
				button.addActionListener( ActionQuestionBox.new( window ) )
				window.addWidget( button )
				
				button = Button.new( "Small Choose Box" )
				button.addActionListener( ActionSmallChooseBox.new( window ) )
				window.addWidget( button )
				
				button = Button.new( "Large Choose Box" )
				button.addActionListener( ActionLargeChooseBox.new( window ) )
				window.addWidget( button )
				
				button = Button.new( "Selection Box" )
				button.addActionListener( ActionSelectionBox.new( window ) )
				window.addWidget( button )
			end )
			
			window.show( this.pWindow, WindowModal.Placement.window )
		end
	end
	
	
	
	/** \brief Create window. */
	public func new() super( 0, 0, 500, 500 )
		this.setTitle( "GuiTheme" )
		this.createModelGuiThemes()
		this.createContent( this )
	end
	
	/** \brief Dispose of window. */
	public func void dispose()
		this.pModelGuiThemes = null
		this.pComboBoxGuiThemes = null
		super.dispose()
	end
	
	
	
	/** \brief Gui theme list model. */
	private var DefaultListModel pModelGuiThemes
	
	/** \brief Gui theme combo box. */
	private var ComboBox pComboBoxGuiThemes
	
	
	
	/** \brief Update gui theme. */
	public func void updateGuiTheme()
		this.setGuiTheme( ( this.pModelGuiThemes.getAt( \
			this.pComboBoxGuiThemes.getSelectedElement() ) cast NamedGuiTheme ).getGuiTheme() )
	end
	
	/** \brief Create gui theme model. */
	private func void createModelGuiThemes()
		var Console console = Console.new( 20 )
		console.addListener( LogMessage.new() )
		var LoadGuiTheme loadGuiTheme = TestProject.getApp().getLoaders().getGuiTheme()
		
		this.pModelGuiThemes = DefaultListModel.new()
		this.pModelGuiThemes.add( NamedGuiTheme.new( "Simple", loadGuiTheme.loadFromFile( \
			"/shareddata/guithemes/simple/simple.guitheme.xml" ) ) )
		this.pModelGuiThemes.add( NamedGuiTheme.new( "Modern", loadGuiTheme.loadFromFile( \
			"/shareddata/guithemes/modern/modern.guitheme.xml" ) ) )
	end
	
	
	
	/** \brief Add content. */
	private func void createContent( Container content )
		content.setLayout( BorderLayout.new( 5 ) )
		
		// we can not use a designer selector here since the loaded gui themes do not degine
		// this selector. thus we define the padding for the window ourself and protect it
		content.setPadding( BorderSize.new( 10 ) )
		content.setProtectPadding( true )
		
		// gui theme selection
		var Panel panel = Panel.new()
		panel.setLayout( FlowLayout.new( LayoutAxis.x, 10, FlowLayout.Stretch.last ) )
		this.pComboBoxGuiThemes = ComboBox.new( this.pModelGuiThemes )
		this.pComboBoxGuiThemes.setSelectedElement( this.pModelGuiThemes.getCount() - 1 )
		this.pComboBoxGuiThemes.setNumberDisplayLines( 5 )
		this.pModelGuiThemes.addListener( SelectionListenerGuiTheme.new( this ) )
		panel.addWidget( Label.new( "Gui Theme:" ) )
		panel.addWidget( this.pComboBoxGuiThemes )
		content.addWidget( panel, BorderLayout.Area.top )
		
		// test widgets
		panel = Panel.new()
		panel.setLayout( BorderLayout.new( 5 ) )
		content.addWidget( panel, BorderLayout.Area.content )
		
		// test models
		var RangeModel modelScroll = DefaultRangeModel.new( 0, 20, 5, 6, 1 )
		var RangeModel modelProgress = DefaultRangeModel.new( 0, 100, 20, 30, 1 )
		var TextModel textModel = DefaultTextModel.new( "Shared text" )
		
		// right border
		var ScrollBar scrollbar = ScrollBar.new( Orientation.vertical )
		scrollbar.setModel( modelScroll )
		panel.addWidget( scrollbar, BorderLayout.Area.right )
		
		// left border
		scrollbar = ScrollBar.new( Orientation.vertical )
		scrollbar.setModel( modelScroll )
		panel.addWidget( scrollbar, BorderLayout.Area.left )
		
		// bottom border
		scrollbar = ScrollBar.new( Orientation.horizontal )
		scrollbar.getModel().setAll( 0, 255, 32, 64, 1 )
		panel.addWidget( scrollbar, BorderLayout.Area.bottom )
		
		// content
		var Panel subPanel = Panel.new()
		subPanel.setLayout( FlowLayout.new( LayoutAxis.y, 2, FlowLayout.Stretch.last ) )
		panel.addWidget( subPanel, BorderLayout.Area.content )
		
		scrollbar = ScrollBar.new( Orientation.horizontal )
		scrollbar.setModel( modelProgress )
		subPanel.addWidget( scrollbar )
		
		var ProgressBar progressBar = ProgressBar.new( Orientation.horizontal, modelProgress )
		subPanel.addWidget( progressBar )
		
		var Panel frame = Panel.new()
		frame.setLayout( FlowLayout.new( LayoutAxis.x, 5, FlowLayout.Stretch.last ) )
		subPanel.addWidget( frame )
		
		//var IntegerTextField integerText = IntegerTextField.new( RangeTextModel.new( modelProgress ) )
		var TextField integerText = TextField.new()
		integerText.setDisplayCharCount( 3 )
		integerText.setValidator( SimpleTextValidator.new( 3, SimpleTextValidator.CharacterClass.digits ) )
		frame.addWidget( integerText )
		
		frame.addWidget( SpinButton.new( modelProgress ) )
		
		frame.addWidget( ProgressBar.new( Orientation.horizontal, modelProgress ) )
		
		var Panel subSubPanel = Panel.new()
		subSubPanel.setLayout( BoxLayout.new( LayoutAxis.x, 5 ) )
		subSubPanel.addWidget( TextField.new( textModel ) )
		var TextField textField = TextField.new( textModel )
		textField.setEnabled( false )
		subSubPanel.addWidget( textField )
		subPanel.addWidget( subSubPanel )
		
		subSubPanel = Panel.new()
		subSubPanel.setLayout( BoxLayout.new( LayoutAxis.x, 5 ) )
		subSubPanel.addWidget( TextField.new( textModel ) )
		textField = TextField.new( textModel )
		textField.setReadOnly( true )
		subSubPanel.addWidget( textField )
		subPanel.addWidget( subSubPanel )
		
		subSubPanel = Panel.new()
		subSubPanel.setLayout( BorderLayout.new( 5 ) )
		subPanel.addWidget( subSubPanel )
		
		var Panel subSubSubPanel = Panel.new()
		subSubSubPanel.setLayout( BoxLayout.new( LayoutAxis.x, 5 ) )
		subSubPanel.addWidget( subSubSubPanel, BorderLayout.Area.content )
		
		var Image imageColorful = Image.new( "/images/colorful.png" )
		var Button button = Button.new( "Popup", imageColorful )
		button.addActionListener( ActionPopupTest.new( this ) )
		subSubSubPanel.addWidget( button )
		
		button = Button.new( "Modal", imageColorful )
		button.addActionListener( ActionDialogTest.new( this ) )
		subSubSubPanel.addWidget( button )
		
		button = Button.new( "Disabled", imageColorful )
		button.setEnabled( false )
		subSubSubPanel.addWidget( button )
		
		subSubSubPanel = Panel.new()
		subSubSubPanel.setLayout( BoxLayout.new( LayoutAxis.x, 5 ) )
		subSubPanel.addWidget( subSubSubPanel, BorderLayout.Area.right )
		
		button = ToggleButton.new( "Toggle", imageColorful )
		subSubSubPanel.addWidget( button )
		
		
		
		subSubPanel = Panel.new()
		subSubPanel.setLayout( GridLayout.new( 3, 2, 5 ) )
		subPanel.addWidget( subSubPanel )
		
		var ActionEnableButtons actionEnableButtons = ActionEnableButtons.new()
		
		var CheckBox checkBox = CheckBox.new( "Check box 1" )
		subSubPanel.addWidget( checkBox )
		
		checkBox = CheckBox.new( "Disable" )
		actionEnableButtons.setTriggerButton( checkBox )
		checkBox.addActionListener( actionEnableButtons )
		subSubPanel.addWidget( checkBox )
		
		checkBox = CheckBox.new( "Check box 3" )
		actionEnableButtons.addWidget( checkBox )
		subSubPanel.addWidget( checkBox )
		
		var ToggleButtonGroup optionGroup = ToggleButtonGroup.new()
		var OptionBox optionBox = OptionBox.new( "Option 1" )
		optionGroup.add( optionBox )
		subSubPanel.addWidget( optionBox )
		
		optionBox = OptionBox.new( "Option 2" )
		optionGroup.add( optionBox )
		subSubPanel.addWidget( optionBox )
		
		optionBox = OptionBox.new( "Option 3" )
		optionGroup.add( optionBox )
		actionEnableButtons.addWidget( optionBox )
		subSubPanel.addWidget( optionBox )
		
		
		
		var TextArea textArea = TextArea.new( DefaultTextModel.new( "Multiline Text\nAnother line\nAnd one more" ) )
		textArea.setMaximalWidth( 50 )
		textArea.setRowCount( 3 )
		subPanel.addWidget( ScrollPanel.new( textArea ) )
	end
end
