/* 
 * Drag[en]gine Library Scripts -- Game Engine
 *
 * Copyright (C) 2020, Pl√ºss Roland (roland@rptd.dnsalias.net)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


pin Dragengine.Gui.Events
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Designers
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief DragonScript test project canvas creator window.
 */
class WindowCanvasCreator extends Window
	/** \brief Create game. */
	public func new() super(0, 0, 600, 450)
		setDesignerSelector("WindowPadding")
		setTitle("Canvas Creator")
		createContent(this)
	end
	
	
	
	/** \brief Add content. */
	private func void createContent(Container content)
		// see canvascreator.guitheme.xml for the designer definitions
		
		var Widget widget
		
		content.setLayout(BoxLayout.new(LayoutAxis.y, 10))
		
		// image creator
		content.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 10, FlowLayout.Stretch.last), block Panel p
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas1a")
			p.addWidget(widget)
			
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas1b")
			p.addWidget(widget)
		end))
		
		// image border creator
		content.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 10, FlowLayout.Stretch.last), block Panel p
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas2a")
			p.addWidget(widget)
			
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas2b")
			p.addWidget(widget)
			
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas2c")
			p.addWidget(widget)
		end))
		
		// theme1
		content.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 10), block Panel p
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas3a")
			p.addWidget(widget)
			
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas3b")
			p.addWidget(widget)
		end))
		
		content.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 10), block Panel p
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas3a")
			widget.setMinimumSize(Point.new(80, 16))
			widget.setProtectMinimumSize(true)
			p.addWidget(widget)
			
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas3b")
			widget.setMinimumSize(Point.new(80, 16))
			widget.setProtectMinimumSize(true)
			p.addWidget(widget)
		end))
		
		// theme2
		content.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 10), block Panel p
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas4a")
			p.addWidget(widget)
			
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas4b")
			p.addWidget(widget)
		end))
		
		// combined
		content.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 10), block Panel p
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas5a")
			p.addWidget(widget)
			
			widget = Widget.new()
			widget.setDesignerSelector("WindowCanvasCreator.Canvas5b")
			p.addWidget(widget)
		end))
	end
end
