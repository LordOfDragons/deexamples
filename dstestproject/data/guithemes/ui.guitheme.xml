<?xml version='1.0' encoding='ISO-8859-1'?>
<guiTheme extend='/shareddata/guithemes/modern/modern.guitheme.xml'>
	<!--
	Gui themes can be defined in various ways.
	
	Without using any attributes an empty gui theme is defined. This is the way to completly
	define a gui theme from the ground up. You have to use this solution also if you import
	gui themes or create named fui themes. For an example of an imported gui theme see the
	layoutText.guitheme.xml file.
	
	The most often used solution is by using the 'extend' attribute as done here. This loads
	the specified gui theme first. Then the definitions in this file replace the definitions
	present in the extended gui theme.
	
	A less common solution is using the 'extendNamed' attribute. This locates the named
	gui theme with the matching selector from the attribute. If found a copy of the definition
	therein is applied to the gui theme before continue as with the extend attribute case.
	This solution allows to base named gui themes on other named gui themes previously
	defined in the current gui theme. This can be useful for more complex game UI situations
	to reduce the typing and maintenance overhead.
	
	The recommended solution is using modern.guitheme.xml as base with the 'extend' attribute.
	This provides a solid and working basis to apply your modifications.
	-->
	
	
	<!--
	Desktops are typically the root widget used in any UI. By default they have no background
	defined since this is project specific. We use here a black background. Other typical
	solutions are using a background image or a world renderer to use a 3D background.
	-->
	<designer name='Desktop' type='Desktop'>
		<canvasCreator parameter='normal.canvas' type='Rectangle'>
			<color parameter='colorFill' r='0' g='0' b='0'/>
		</canvasCreator>
		
		<mousePointer parameter='normal.mousePointer' type='Image'>
			<image parameter='image'>/images/mousepointer.png</image>
		</mousePointer>
	</designer>
	
	<!--
	BaseGameApp creates a WindowGameWorld for us which by default has no mouse pointer.
	By using 'null' type we drop the empty mouse pointer getting back the desktop one.
	-->
	<designer name='WindowGameWorld' extendNamed='WindowGameWorld'>
		<null parameter='normal.mousePointer'/>
	</designer>
	
	<!--
	The default logo window has no mouse pointer since it is usually used with captured
	input mode. Since we use it without captured input mode keep it visible.
	-->
	<designer name='WindowLogo' type='Window'>
		<canvasCreator parameter='normal.canvas' type='Rectangle'>
			<color parameter='colorFill' r='0' g='0' b='0'/>
		</canvasCreator>
	</designer>
	
	<!--
	Windows with a padding of 10.
	-->
	<designer name='WindowPadding' extendNamed='Window'>
		<borderSize parameter='normal.padding' all='10'/>
	</designer>
	
	<!--
	For the main menu we use a background window showing the logo. This window has no decoration
	border or background color since it contains only a DisplayImage widget. The default window
	designer implementation does nothing. This is what we want so no additional parameters
	are used at all. This is the usual way to create naked widgets.
	-->
	<designer name='LogoWindow' type='Window'/>
	
	
	<!--
	In some examples we need panels with an explicit background drawn. This is required for
	capture or view canvas since otherwise the background is undefined causing undefined
	behavior. By using this selector the panel is set a solid color background
	-->
	<designer name='PanelWithBackground' type='Widget'>
		<canvasCreator parameter='normal.canvas' type='Rectangle'>
			<color parameter='colorFill' r='0.86' g='0.86' b='0.86'/>
		</canvasCreator>
	</designer>
	
	
	<!--
	The canvas capture example uses a display area which should is darkened a bit.
	-->
	<designer name='CaptureScrollPanel' type='Widget'>
		<canvasCreator parameter='normal.canvas' type='Rectangle'>
			<color parameter='colorFill' r='0.5' g='0.5' b='0.5'/>
		</canvasCreator>
	</designer>
	
	
	<!--
	Make the styled text test widget look like a text widget. DisplayStyledText does not
	extend TextWidget hence we can not simply copy a TextField or TextArea style. Instead
	we just apply the same background and border used for the normal state. All other
	states this widget does not support anyways.
	-->
	<designer name='DisplayStyledText' type='Widget'>
		<canvasCreator parameter='normal.canvas'
			extend='/shareddata/guithemes/modern/framed/background.ccreator.xml'/>
		<border parameter='normal.border' type='CanvasCreator'>
			<canvasCreator parameter='canvasCreator'
				  extend='/shareddata/guithemes/modern/framed/normal.ccreator.xml'/>
			<borderSize parameter='size' all='2'/>
		</border>
		<borderSize parameter='normal.padding' left='2'/>
		<point parameter='normal.minimumSize' x='400' y='300'/>
	</designer>
	
	
	<!--
	Announce window list box.
	-->
	<designer name='ListBox.Announcers' extendNamed='ListBox'>
		<point parameter='normal.minimumSize' x='150' y='50'/>
	</designer>
	
	
	<!--
	Dynamic music window list box.
	-->
	<designer name='ListBox.DynamicMusic' extendNamed='ListBox'>
		<point parameter='normal.minimumSize' x='150' y='50'/>
	</designer>
	
	
	<!--
	Example of an icon style list box. The renderer uses a designer for the label similar
	to the regular list box.
	-->
	<designer name='Label.ListRenderer.IconList.Text' type='Label'>
		<canvasCreator parameter='normal.canvas' type='Default'/>
		<color parameter='normal.textColor' r='0' g='0' b='0'/>
	</designer>
	
	<designer name='Label.ListRenderer.IconList.Text.Selected' type='Label'>
		<canvasCreator parameter='normal.canvas'
		extend='/shareddata/guithemes/modern/framed/background.ccreator.xml'>
			<colorMatrix parameter='colorMatrix'>
				<scale r='0.2' g='0.2' b='0.5'/>
			</colorMatrix>
		</canvasCreator>
		<color parameter='normal.textColor' r='1' g='1' b='1'/>
	</designer>
	
	
	<!--
	Import definitions for the canvas creator test. Importing allows to split complex
	definitions over multiple files to keep things tidy.
	-->
	<import>canvascreator.guitheme.xml</import>
	<import>borders.guitheme.xml</import>
	
	
	<!--
	Import definitions for the layout test.
	-->
	<import>layout.guitheme.xml</import>
</guiTheme>
