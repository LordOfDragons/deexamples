<?xml version='1.0' encoding='ISO-8859-1'?>
<guiTheme>
	<!--
	This file contains canvas creator definitions for the WindowCanvasCreator example.
	It is used using an import tag in the ui.guitheme.xml . For this reason the guiTheme
	tag is required to have no attributes defined at all. Otherwise the result can be
	quite unexpected.
	-->
	
	
	<!--
	Example using Image canvas creator. This uses a single image stretched across the
	entire size of the widget. The colorMatrix parameter is used to colorize the image.
	Color matrix can be of any complexity required. In the examples used here only
	the scale parameter is used which multiplies the image color component wise with
	a custom color.
	-->
	<designer name='WindowCanvasCreator.Canvas1a' type='Widget'>
		<canvasCreator parameter='normal.canvas' type='Image'>
			<image parameter='image'>/images/creator/button/center.png</image>
			<colorMatrix parameter='colorMatrix'>
				<scale r='1' g='0.75' b='0.75'/>
			</colorMatrix>
		</canvasCreator>
		<point parameter='normal.minimumSize' x='100' y='80'/>
	</designer>
	
	<!--
	This is the same canvas creator as above but with a different colorization.
	
	You could use extendNamed='WindowCanvasCreator.Canvas1a' to copy the definition of
	the previous designer. In this case you have to replace the entire canvas creator.
	You can not replace individual parameters from inside the canvas creator. If you
	want to reuse canvas creators like this you can put the canvasCreator tag inside
	an own xml file (for example 'mycanvas.ccreator.xml') and use
	extend='mycanvas.ccreator.xml'. This creates a copy of the definition in the xml
	file and applies the local definitions over the copied definition. Then you can
	replace just the color matrix for example. This solution is used in he modern
	gui theme.
	-->
	<designer name='WindowCanvasCreator.Canvas1b' type='Widget'>
		<canvasCreator parameter='normal.canvas' type='Image'>
			<image parameter='image'>/images/creator/button/center.png</image>
			<colorMatrix parameter='colorMatrix'>
				<scale r='0.5' g='1' b='0.75'/>
			</colorMatrix>
		</canvasCreator>
	</designer>
	
	<!--
	Example using ImageBorder canvas creator. This uses up to 9 images representing
	the border and center around a widget. The graphics below shows the parameters:
	
	cornerTopLeft    | sideTop    | cornerTopRight
	=================+============+==================
	sideLeft         | center     | sideRight
	=================+============+==================
	cornerBottomLeft | sideBottom | cornerBottomRight
	
	The side* and center parameters are stretched between the corners while the corner*
	parameters keep their size. Not defined images are empty
	-->
	<designer name='WindowCanvasCreator.Canvas2a' type='Widget'>
		<canvasCreator parameter='normal.canvas' type='ImageBorder'>
			<image parameter='center'>/images/creator/button/center.png</image>
			<image parameter='sideLeft'>/images/creator/button/side_left.png</image>
			<image parameter='sideTop'>/images/creator/button/side_top.png</image>
			<image parameter='sideRight'>/images/creator/button/side_right.png</image>
			<image parameter='sideBottom'>/images/creator/button/side_bottom.png</image>
			<image parameter='cornerTopLeft'>/images/creator/button/corner_top_left.png</image>
			<image parameter='cornerTopRight'>/images/creator/button/corner_top_right.png</image>
			<image parameter='cornerBottomLeft'>/images/creator/button/corner_bottom_left.png</image>
			<image parameter='cornerBottomRight'>/images/creator/button/corner_bottom_right.png</image>
			<colorMatrix parameter='colorMatrix'>
				<scale r='0.75' g='0.75' b='1'/>
			</colorMatrix>
		</canvasCreator>
		<point parameter='normal.minimumSize' x='100' y='80'/>
	</designer>
	
	<!--
	Color variation
	-->
	<designer name='WindowCanvasCreator.Canvas2b' type='Widget'>
		<canvasCreator parameter='normal.canvas' type='ImageBorder'>
			<image parameter='center'>/images/creator/button/center.png</image>
			<image parameter='sideLeft'>/images/creator/button/side_left.png</image>
			<image parameter='sideTop'>/images/creator/button/side_top.png</image>
			<image parameter='sideRight'>/images/creator/button/side_right.png</image>
			<image parameter='sideBottom'>/images/creator/button/side_bottom.png</image>
			<image parameter='cornerTopLeft'>/images/creator/button/corner_top_left.png</image>
			<image parameter='cornerTopRight'>/images/creator/button/corner_top_right.png</image>
			<image parameter='cornerBottomLeft'>/images/creator/button/corner_bottom_left.png</image>
			<image parameter='cornerBottomRight'>/images/creator/button/corner_bottom_right.png</image>
			<colorMatrix parameter='colorMatrix'>
				<scale r='0.75' g='1' b='1'/>
			</colorMatrix>
		</canvasCreator>
	</designer>
	
	<!--
	Normal button design from modern gui theme. This uses the extend attribute to add a
	copy of the canvas creator. In this case we could modify the canvas creator for
	example by replacing the color matrix parameter.
	-->
	<designer name='WindowCanvasCreator.Canvas3a' type='Widget'>
		<canvasCreator parameter='normal.canvas'
			extend='/shareddata/guithemes/modern/button/normal.ccreator.xml'/>
		<point parameter='normal.minimumSize' x='80' y='30'/>
	</designer>
	
	<!--
	Pressed button design from modern gui theme.
	-->
	<designer name='WindowCanvasCreator.Canvas3b' type='Widget'>
		<canvasCreator parameter='normal.canvas'
			extend='/shareddata/guithemes/modern/button/pressed.ccreator.xml'/>
		<point parameter='normal.minimumSize' x='80' y='30'/>
	</designer>
	
	<!--
	Example of Bevel canvas creator.
	-->
	<designer name='WindowCanvasCreator.Canvas4a' type='Widget'>
		<canvasCreator parameter='normal.canvas' type='Bevel'>
			<color parameter='colorHilight' r='1' g='1' b='1'/>
			<color parameter='colorShadow' r='0.6' g='0.6' b='0.6'/>
		</canvasCreator>
		<point parameter='normal.minimumSize' x='80' y='30'/>
	</designer>
	
	<!--
	Same as above but inversed colors.
	-->
	<designer name='WindowCanvasCreator.Canvas4b' type='Widget'>
		<canvasCreator parameter='normal.canvas' type='Bevel'>
			<color parameter='colorHilight' r='0.6' g='0.6' b='0.6'/>
			<color parameter='colorShadow' r='1' g='1' b='1'/>
		</canvasCreator>
		<point parameter='normal.minimumSize' x='80' y='30'/>
	</designer>
</guiTheme>
