/* 
 * Drag[en]gine Graphics Test
 *
 * Copyright (C) 2018, Pl√ºss Roland ( roland@rptd.ch )
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load and save test configuration.
 */
class LoadTestConfiguration extends BaseXmlLoader
	/** \brief Create loader. */
	public func new() super( BaseGameApp.getApp().getConsole(), "LoadTestConfiguration" )
	end
	
	
	
	/** \brief Load test configuration. */
	public func TestConfiguration loadFromFile( String filename )
		this.logLoadingFromFile( filename )
		
		try
			var EasyXML document = EasyXML.new( filename )
			if document.hasParseFailed()
				this.logParsingFailed( document.getParseLog() )
				throw EInvalidParam.new()
			end
			
			var EasyXMLElement root = document.getRootElement()
			if not root.getTagName().equals( "configuration" )
				this.logUnknownTag( root )
				throw EInvalidParam.new()
			end
			
			return this.pReadConfiguration( root )
			
		catch Exception e
			this.logLoadingFailed( filename )
			throw
		end
	end
	
	/** \brief Save test configuration. */
	public func void saveToFile( String filename, TestConfiguration config )
		try
			var EasyXML xml = EasyXML.new()
			var EasyXMLElement tagRoot = xml.getRootElement()
			tagRoot.setTagName( "configuration" )
			
			config.forEachParameter( block TestParameter parameter
				var EasyXMLElement tagParameter = tagRoot.addTag( "parameter" )
				tagParameter.setAttribute( "name", parameter.getName() )
				
				if parameter.getModuleParameter() != null
					tagParameter.addDataTag( "moduleParameter", parameter.getModuleParameter() )
				end
				
				parameter.getSendCommands().forEach( block String each
					tagParameter.addDataTag( "sendCommand", each )
				end )
				
				parameter.getModelValues().forEach( block TestParameterValue value
					var EasyXMLElement tagValue = tagParameter.addTag( "value" )
					tagValue.addDataTag( "name", value.getName() )
					tagValue.addDataTag( "value", value.getValue() )
					tagValue.addDataTag( "description", value.getDescription() )
				end )
				
				if parameter.getDefaultValue() != null
					tagParameter.addDataTag( "defaultValue", parameter.getDefaultValue().getName() )
				end
				
				var Binding binding = parameter.getBinding()
				if binding != null
					tagParameter.addDataTag( "binding", binding.getSourceID() ) \
						.setAttribute( "device", binding.getDeviceID() )
				end
			end )
			
			xml.writeToFile( FileWriter.new( filename ), false )
			
		catch Exception e
			this.logSavingFailed( filename )
			throw
		end
	end
	
	
	
	/** \brief Read configuration tag. */
	private func TestConfiguration pReadConfiguration( EasyXMLElement root )
		var TestConfiguration config = TestConfiguration.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "parameter" )
				config.addParameter( pReadParameter( element ) )
			end
		end )
		
		return config
	end
	
	/** \brief Read parameter tag. */
	private func TestParameter pReadParameter( EasyXMLElement root )
		var TestParameter parameter = TestParameter.new( root.getAttributeNamed( "name" ) )
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "moduleParameter" )
				parameter.setModuleParameter( element.getFirstCData() )
				
			elif tagName.equals( "sendCommand" )
				parameter.getSendCommands().add( element.getFirstCData() )
				
			elif tagName.equals( "value" )
				parameter.getModelValues().add( pReadParameterValue( element ) )
				
			elif tagName.equals( "defaultValue" )
				var String name = element.getFirstCData()
				parameter.setDefaultValue( parameter.getModelValues().find( block TestParameterValue each
					return each.getName().equals( name )
				end ) cast TestParameterValue )
				
			elif tagName.equals( "binding" )
				var BindingManager bindingManager = BaseGameApp.getApp().getBindingManager()
				var String deviceId = element.getAttributeNamed( "device" )
				var String buttonId = element.getFirstCData()
				var Binding binding = bindingManager.findButtonBinding( deviceId, buttonId )
				if binding != null
					bindingManager.removeButtonBinding( binding )
				end
				binding = Binding.new( deviceId, buttonId, parameter.getCommand(), false )
				bindingManager.addButtonBinding( binding )
				parameter.setBinding( binding )
			end
		end )
		
		return parameter
	end
	
	/** \brief Read parameter tag. */
	private func TestParameterValue pReadParameterValue( EasyXMLElement root )
		var Dictionary params = Dictionary.new()
		params.setAt( "description", "" )
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "name" )
				params.setAt( "name", element.getFirstCData() )
				
			elif tagName.equals( "value" )
				params.setAt( "value", element.getFirstCData() )
				
			elif tagName.equals( "description" )
				params.setAt( "description", element.getFirstCData() )
			end
		end )
		
		return TestParameterValue.new( \
			params.getAt( "name" ).toString(), \
			params.getAt( "value" ).toString(), \
			params.getAt( "description" ).toString() )
	end
end
