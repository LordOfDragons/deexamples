<?xml version='1.0' encoding='ISO-8859-1'?>
<elementClass name='ColorLamp' class='GenericBehaviorElement'>
	<!--
	A color lamp demonstrating light animation using an animation move.
	
	This example takes as reference these annoying little ball lamps with changing
	light color. This is recreated here using the ECBehaviorLightAnimation behavior.
	Light animations can be used in two ways: animation move or component state.
	This example uses animation move. Using animation move is best for element
	classes which either do not have a model at all or have a static model where
	you want to easily add a light animation. An example for this could be a
	flickering light fixture or like in this example a color changing lamp.
	
	See the behavior documentation on the Wiki page for detailed information:
	https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_elements
	-->
	
	<!--
	Add component behavior. This shows the model in the game world using a skin
	and optionally rig and other parameters. We need here only model and skin.
	
	Since we use no rig nor ECBehaviorCollider the model has no collision and
	resources like the light can not be attached. For this reason the element
	must not be moved at runtime. If moving the element is required add a rig
	and ECBehaviorCollider and it works.
	-->
	<behavior type='ECBehaviorComponent'>
		<string name='.model'>colorLamp.demodel</string>
		<string name='.skin'>colorLamp.deskin</string>
		
		<!--
		All textures can be defined in the skin file. Often though it is easier
		to reuse skins as textures. This avoids replicating the texture inside
		the skin and is the preferred solution. This is done using the
		"textureReplacements" property. This is a map of texture replacements
		each containing a map of parameters. The "skin" parameter is required
		while others like "transform" and "tint" are optional. These allow to
		fine tune a texture replacement. Most of the time "skin" and "tint"
		are used. "transform"/"scale" is typically used to modify the model
		texture coordinates for example due to finer resolution
		-->
		<map name='.textureReplacements'>
			<map key='base'>
				<string key='skin'>/content/materials/metalPainted/rough.deskin</string>
				<!--
				<map key='transform'>
					<vector2 key='scale' x='2' y='2'/>
					<vector2 key='translate' x='0' y='0.5'/>
				</map>
				<color key='tint' r='0.5' g='0.3' b='0.2'/>
				-->
			</map>
		</map>
	</behavior>
	
	<!--
	Add dynamic skin behavior. This is required for dynamically changing the
	texture to reflect the light parameters.
	-->
	<behavior type='ECBehaviorDynamicSkin'/>
	
	<!--
	Add light. This is the light we want to manipulate with the help of the
	light animation behavior. We assign here the class default parameters.
	The user can change these later on a per element basis in the world editor.
	
	We use here an intensity of 20 since the lamp is sitting outside in a shadow area.
	Daylight intensity is 20 and shadow areas still have around 4. So using 4 allows
	to see the lamp light effect.
	
	Only non-default values are set. See
	https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_light
	for all possible values.
	-->
	<behavior type='ECBehaviorLight'>
		<!--
		Ignore component while casting shadows. This is done by defining a list
		of ECBehaviorComponent. Since the ECBehaviorComponent above has an empty
		identifier this is simply a list with one empty string in it
		-->
		<list name='shadowIgnoreComponents'>
			<string/>
		</list>
		
		<float name='.intensity'>4</float>
		<float name='.range'>3</float>
		<float name='.halfIntensityDistance'>0.4</float>
		<string name='.hintParameter'>dynamic</string>
		<vector name='.position' y='0.15'/>
	</behavior>
	
	<!--
	Add light animation behavior. This animates the light parameters using an
	animation move. The file "data/develop/blender/lightAnimation.blend" contains
	the blender file used to design and export the animation.
	
	The behavior automatically detects and uses ECBehaviorComponent. To make it
	use animation move assign an animation file and the move to use or explicitly
	null the component.
	
	"positionZ" is the default value for "parameter". You do not have to set it
	if you use the bone forward/backward position as animation value. For
	demonstration purpose the value is set here for "colorRed" light parameter.
	You can use bone position/rotation/scale X/Y/Z as well as vertex position set
	weights (blend shapes in blender). Set the "parameter" value accordingly.
	
	Light animation starts if the light becomes active and stops if it becomes
	deactivated. You can try setting a trigger in the editor to see this.
	-->
	<behavior type='ECBehaviorLightAnimation'>
		<string name='.animation'>lightAnimation.deanim</string>
		<string name='.move'>lamp light animation</string>
		<string name='.colorRed.target'>color.r</string>
		<string name='.colorRed.parameter'>positionZ</string>
		<string name='.colorGreen.target'>color.g</string>
		<string name='.colorBlue.target'>color.b</string>
		<string name='.intensity.target'>intensity</string>
	</behavior>
	
	<!--
	Add renderable light behavior. This behavior updates renderables to match
	the light intensity and color. This behavior automatically detects and uses
	ECBehaviorLight and ECBehaviorDynamicSkin.
	
	The "scaleIntensity" is used to scale up the light intensity. In reality
	a light bulb is much more intense than the light hitting the table around
	it. This is due to light intensity spreading across a sphere. In this
	example the light has an intensity of 4. Doubling makes it easier to see.
	-->
	<behavior type='ECBehaviorRenderableLight'>
		<string name='.renderableIntensity'>light.intensity</string>
		<string name='.renderableColor'>light.color</string>
		<float name='.scaleIntensity'>2</float>
	</behavior>
	
	<!--
	That's it. The element class is now ready and shows a model with a light
	where the light is animated and the model reflects the light parameters.
	-->
</elementClass>
