namespace Example

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * Extendible behavior element class.
 * 
 * This element class allows XML element classes to add behaviors in addition to
 * defining properties. You have to explicitely add behavior factories to element
 * classes for this to work. Regular classes to not allow adding behaviors. This
 * helps to keep control over how XML element classes can modify game logic.
 * 
 * This class adds all behavior factories provided by the Drag[en]gine game engine
 * as well as those added by the example project.
 * 
 * \ref GenericBehaviorElementClass is used as base class since it already adds
 * all game engine provided behavior factories. For higher control over the added
 * behavior factories create a \ref BehaviorElementClass subclass and add the desired
 * behavior factories manually.
 * 
 * The element class is named "GenericBehaviorElement" like the base class. This way
 * this element class is not required to be explicitely added to the game definition
 * since it contains already the definition for "GenericBehaviorElement" by default.
 */
class ExtendibleBehaviorElementClass extends GenericBehaviorElementClass
	/**
	 * Create element class.
	 */
	func new()
	end
	
	func new(String name) super(name)
	end
	
	
	func void addBehaviorFactories()
		super.addBehaviorFactories()
		
		// Overwriting this method is an easy way to modify the behavior factories
		// supported by this element class. Here we add our own behavior factories
		// to the ones provided by the Drag[en]gine.
		addBehaviorFactory(BehaviorChooseColors.Factory.new())
		addBehaviorFactory(BehaviorInteractToggle.Factory.new())
	end
	
	
	/**
	 * Create copy of element class.
	 */
	func ElementClass duplicateNamed(String classname)
		return ExtendibleBehaviorElementClass.new(classname)
	end
end
