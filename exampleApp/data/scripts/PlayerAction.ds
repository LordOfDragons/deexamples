namespace Example

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Base action for PlayerActor.
 * 
 * Uses the BAAFirstPerson as base class. This provides basic handling suitable for first
 * person type 3D games.
 * 
 * By implementing BAAInteract this action supports CommandsBAAInteract bindings. This
 * allows to react to a primary and secondary action, which is typically the left and
 * right mous button.
 */
class PlayerAction extends BAAFirstPerson implements BAAInteract
	/**
	 * \brief Factory for creating action
	 */
	public class Factory implements ECBehaviorActorAIAction.ActionFactory
		public func new()
		end
		
		public func BaseActorAction createAction(ECBehaviorActorAIAction.Instance instance)
			return PlayerAction.new()
		end
	end
	
	
	
	public var ECBehaviorLookAt.Instance lookAt
	
	
	
	/**
	 * \brief Create Actionn.
	 */
	public func new()
	end
	
	
	
	/**
	 * Find and store behaviors. This is for convenience. By storing behavior instances
	 * aside you can access them later on, including subclasses.
	 */
	protected func void initBehaviors()
		super.initBehaviors()
		
		lookAt = (actor cast PlayerActor).lookAt
	end
	
	
	/**
	 * Think. Extended to use footsteps.
	 */
	public func void think(float elapsed)
		super.think(elapsed)
		
		footSteps()
	end
	
	/**
	 * Update foot steps.
	 */
	public func void footSteps()
		// if going to stop moving stop foot steps. otherwise use the appropriate steps
		if getLocomotion().getLocomotion().getAbsMovingSpeed() < 0.01
			getFootSteps().clearActiveConfiguration()
			
		elif getPlayerInputMove().getRun()
			getFootSteps().setActiveConfigurationWithID(PlayerActorClass.FOOTSTEPS_RUN, true)
			
		else
			getFootSteps().setActiveConfigurationWithID(PlayerActorClass.FOOTSTEPS_WALK, true)
		end
	end
	
	
	/**
	 * Implements BAAInteract.primaryActionStart().
	 */
	public func void primaryActionStart()
		// Check what element the player is looking at
		var BehaviorElement target = lookAt.getLookAtBehaviorElement()
		if target == null
			return // Nothing of interest looked at
		end
		
		// There are various ways on how to figure out what to do with the element being
		// looked at.
		// 
		// One way is to use an ElementVisitor subclass. This requires individual
		// BehaviorElement subclasses to call the visitor subclass methods. This is an
		// elaborate solution which highest control but requires some work to set up.
		// 
		// Another way is to look at the behaviors supported by the element and using
		// this to figure out what action to do. This is a flexible solution and allows
		// to evaluate what to do on the behaviors supported by an element instead of
		// the element type itself.
		// 
		// The solution below uses forEachInstance() with individual blocks using
		// the supported behaviors as argument. BehaviorElement.forEachInstance()
		// calls blocks only if the visited instance is castable to the block parameter.
		// This simplifies script code.
		target.forEachInstance(block BehaviorInteractToggle.Instance interactToggle
			// This element supports the toggle interaction. So do it and exit
			aiAction.setAction(PlayerActionInteractToggle.new(interactToggle))
		end)
		
		target.forEachInstance(block BehaviorChangeCustomColors.Instance chooseCustomColors
			// This element supports the choose custom colors interaction. So do it and exit
			aiAction.setAction(PlayerActionCustomColor.new(chooseCustomColors))
		end)
		
		// Using forEachInstance() works if only one of the supported behaviors is
		// present in the element. A more elaborate version can use findInstance().
		// This method also calls blocks only if the instance is castable to the block
		// parameter but stops when the block returns true. The code below is the same
		// as the forEachInstance() version above but stops after the first supported
		// behavior has been processed. This kind of solution is required to be
		// priorized.
		/*
		if target.findInstance(block BehaviorInteractToggle.Instance interactToggle
			// This element supports the toggle interaction. So do it and exit
			aiAction.setAction(PlayerActionInteractToggle.new(interactToggle))
			
			// return false if the behavior is not processed for example because it is disabled
			return true
		end) != null
			return
		end
		
		if target.findInstance(block BehaviorChangeCustomColors.Instance chooseCustomColors
			// This element supports the choose custom colors interaction. So do it and exit
			aiAction.setAction(PlayerActionCustomColor.new(chooseCustomColors))
			return true
		end) != null
			return
		end
		*/
	end
	
	/**
	 * Implements BAAInteract.primaryActionStop().
	 */
	public func void primaryActionStop()
	end
	
	/**
	 * Implements BAAInteract.secondaryActionStart().
	 */
	public func void secondaryActionStart()
	end
	
	/**
	 * Implements BAAInteract.secondaryActionStop().
	 */
	public func void secondaryActionStop()
	end
end
