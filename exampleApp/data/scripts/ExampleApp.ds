namespace Example

pin Dragengine.CameraDirectors
pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * Example application.
 */
class ExampleApp extends BaseGameApp
	/**
	 * Load game world and start game. Used as listener for startLoadGameWorld() calls.
	 */
	private class StartGame extends WindowGameWorld.Loader
		/**
		 * Create load game world instance. Loads "pathWorld" (which is a *.deworld file).
		 * The resulting GameWorld instance is assigned to "window".
		 */
		public func new(WindowGameWorld window, String pathWorld) super(window)
			setPathWorld(pathWorld)
		end
		
		/**
		 * Loading game world finished. The super class implementation assigns the
		 * game world to the window. Subclass has to finish setting up the game world
		 * before it is assigned. Typically this involves creating and spawning the
		 * player as well as activating a CameraDirector to show the world
		 */
		public func void onLoadWorldFinished()
			var ExampleApp app = BaseGameApp.getApp() cast ExampleApp
			var GameWorld gameWorld = getStubWorld().getGameWorld()
			
			// Create player actor using our PlayerActorClass element class.
			var ElementClass eclass = app.getElementClassList().getNamed("PlayerActor")
			var UniqueID id = app.getIDGenerator().nextID()
			var StubElement stub = StubElement.new(eclass, id)
			
			// Now the player actor can be created using the stub
			var PlayerActor player = stub.createElement() cast PlayerActor
			
			// The ECBehaviorActorAIAction behavior is configured in the Actor element class
			// to use BAAFirstPerson as action and BAAIBehaviorTree as AI. this avoids the
			// need to manually assign action and AI instances on the created element.
			
			// Spawn player actor at named spawn point
			gameWorld.getSpawnPoints().getNamed("player").spawn(gameWorld, player)
			
			// Take control of player actor
			player.getPlayerControllable().takeControl()
			
			// Assign camera director attaching the camera to the player controlled actor
			// at eye level.
			// 
			// You can also set camera related parameters. Parameters set to the camera
			// director will be applied to all cameras the director takes control of so
			// you do not have to do this by hand all the time.
			// 
			// Despite the name the camera director also directs microphone resource
			var PlayerControlledActorCameraDirector director = PlayerControlledActorCameraDirector.new()
			
			// Set the view distance of the camera. Everything beyond the view distance
			// in meters is not rendered. The graphic module decides how to handle
			// content beyond the view distance the best way possible
			director.setViewDistance(250)
			
			// Set light adaption parameters. The graphic module automatically adjusts
			// the scene intensity of the camera depending on the content seen by the
			// camera. The intensity is adjusted inside the range defined below.
			// 
			// The Drag[en]gine uses scaled real-world intensities. These are example
			// values for light source intensites:
			// - Moon light of full moon: 0.01
			// - Candle in a dark room: 0.1
			// - Living room lit at night: 1
			// - Bright lit office room: 2-4
			// - Overcast day light: 10
			// - Clear sky day light: 20
			director.setLowestIntensity(1)
			director.setHighestIntensity(20)
			
			// The adaption time indicates how fast the camera adjusts the intensity
			// to match the scene intensity. The default value is 0.1 which adjusts
			// very fast. For scenes with outdoor and indoor areas it is better to
			// use slower adjustment. The human eye can fully adjust to darkness
			// out of bright daylight between 20-30 minutes. This is a bit much for
			// game situations so using something like 30-60 seconds is good for
			// most situations. Lower values can be used to make this faster if required
			director.setAdaptionTime(20)
			
			getWindow().setCameraDirector(director)
			
			// Effects can be added to the camera. Typically you will add effects and
			// disable them. Then you can later on enable them using behaviors. For this
			// to work store the effects aside so you can find them later on
			
			// The overlay effect simply renders an image over the scene
			/*
			var EffectOverlayImage effectOverlay = EffectOverlayImage.new()
			effectOverlay.setImage(Image.new("/content/images/overlay1.webp"))
			effectOverlay.setTransparency(0.85)
			getWindow().getCamera().addEffect(effectOverlay)
			*/
			
			// The color matrix effect applies a color matrix to the rendered image
			/*
			var EffectColorMatrix effectColor = EffectColorMatrix.new()
			effectColor.setColorMatrix(ColorMatrix.newSaturation(0) * ColorMatrix.newScaling(1, 0.85, 0.5, 1))
			getWindow().getCamera().addEffect(effectColor)
			*/
			
			// The distortion image effect allows to distort the image on a large scale
			// with varying strength and direction for each screen pixel. The image is
			// typically a normal map indicating with the red and green channel the X
			// respectively Y distortion. The distortion is a relative value in the
			// range from -1 (value 0) to 1 (value 255) incidating the offset. This
			// offset is multiplied by the distortion strength which is also relative
			// to the screen size. For example if you use a distortion strength of 0.1
			// then a distortion of 1 offsets by 10% of the screen width/height. The
			// distortion image is not required to match the screen size.
			/*
			var EffectDistortImage effectDistort = EffectDistortImage.new()
			effectDistort.setImage(Image.new("/content/images/distortion1.webp"))
			effectDistort.setStrength(0.05, 0.05)
			getWindow().getCamera().addEffect(effectDistort)
			*/
			
			// Apply filter kernel to each pixel. This example uses a normalized kernel
			// [1 2 1]
			// [2 4 2]
			// [1 2 1]
			// Normalized kernels conserve image intensity. Denormalized kernels make
			// images brighter or darker
			/*
			var EffectFilterKernel effectKernel = EffectFilterKernel.new()
			effectKernel.setKernelSize(3, 3)
			effectKernel.setKernelValue(0, 0, 1.0 / 16.0)
			effectKernel.setKernelValue(0, 1, 2.0 / 16.0)
			effectKernel.setKernelValue(0, 2, 1.0 / 16.0)
			effectKernel.setKernelValue(1, 0, 2.0 / 16.0)
			effectKernel.setKernelValue(1, 1, 4.0 / 16.0)
			effectKernel.setKernelValue(1, 2, 2.0 / 16.0)
			effectKernel.setKernelValue(2, 0, 1.0 / 16.0)
			effectKernel.setKernelValue(2, 1, 2.0 / 16.0)
			effectKernel.setKernelValue(2, 2, 1.0 / 16.0)
			getWindow().getCamera().addEffect(effectKernel)
			*/
			
			// Finish and start running. The binding input processor is activated which
			// uses bindings to redirect inputs to game commands. An alternative is
			// activating the desktop input processor for example if you want to
			// realize a point and click type game.
			// 
			// The call to finishLoadGameWorld() has to come last. After this call
			// the game is running and no loading should interfere anymore
			super.onLoadWorldFinished()
			app.setInputProcessorBindings()
			app.finishLoadGameWorld()
		end
		
		/**
		 * Loading the game world failed. The super class implementation clears everything
		 * used for loading game worlds. The subclass implementation has to go back to a
		 * working state like showing the main menu with an error message box. In this
		 * example app we simply exit the game.
		 */
		public func void onLoadWorldFailed()
			super.onLoadWorldFailed()
			BaseGameApp.getApp().cancelLoadGameWorld()
			Engine.quit()
		end
	end
	
	
	
	/**
	 * Create example application.
	 */
	public func new()
		pathDesktopGuiTheme = "/content/ui/main.guitheme.xml"
		pathLanguagePacks = "/content/langpacks"
		defaultLanguagePackName = UnicodeString.newFromUTF8("English")
	end
	
	/**
	 * Initialize application.
	 */
	public func void initGame()
		super.initGame()
		
		// Start game by showing the Drag[en]gine Game Engine logo and optionally other logos
		// you would like to show. WindowLogo.show*() does all the work of showing a logo or
		// video with optional sound. Once the window is finished (the user can skip it)
		// the provided action listener is called. This can be a class implementing the
		// ActionListener interface or using BlockActionListener. This is a convenience
		// class allowing to use a block as an action and is suitable for quick coding.
		// Using a class implementing ActionListener is though favorable since it makes
		// it easier to chain actions in an understandable way and to reuse actions.
		// 
		// Showing the Drag[en]gine Game Engine logo is not required at all to use this
		// game engine but we highly appreciate it if you do so.
		
		WindowLogo.showDragengineLogo(this.getDesktop(), BlockActionListener.new(\
			block ActionEvent event
				launchApplication()
			end))
	end
	
	/**
	 * Load settings from saved settings or set default settings.
	 * 
	 * Loads the saved settings from pathSavedSettings property. If the saved settings file
	 * is absent or damaged set default settings and saves the file. Ensures a valid
	 * settings file with all known settings is saved to file. This way players can modify the
	 * settings file and know all possible settings without needing to search.
	 * 
	 * If you change settings call saveSettings() to save the settings to the saved file.
	 * It is best to save changes to the bindings immediately.
	 */
	protected func void loadSettings()
		super.loadSettings()
		
		// Load settings and store them locally. This makes it faster to retrieve
		// values queried often.
		ExampleAppSettings.settingsLoaded()
	end
	
	/**
	 * Launch example application. Called after logo windows are finished.
	 */
	public func void launchApplication()
		// Add a shout console ontop of the game world window. This transparent widget
		// prints messages send to the application wide console object at the top of
		// the screen vanishing after a couple of seconds.
		getWindowGameWorld().addWidget(ShoutConsole.new(getConsole()))
		
		// You can add more overlay widgets here for example a HUD widget or a UI
		// widget if you want to realize a point and click type game. The game world
		// window uses a StackLayout hence all added overlay widgets cover the entire
		// screen with later added widgets placed on top of previously added ones
		
		/*
		// Strings can be translated using getTranslationManager(). To change the language
		// provided assign language pack to the translation manager.
		getConsole().addMessage("Translation for 'HelloWorld' = '" \
			+ getTranslationManager().translate("HelloWorld")  + "'")
		*/
		
		// Sometimes it can be useful to get some overview of element classes used in a project
		// especially if the project becomes bigger and more complex. For this purpose a debug
		// class exists: Dragengine.Debugging.DebugElementClassInfo . If prints out complete
		// element class information into either a file or into the console. Such a file can
		// be put into project documentation to be used by coders and artists as reference
		// material.
		// 
		// The example below creates such a file. It will be written to the "capture" directory.
		// When run from the IGDE the capture directory can be found in the "cache" directory
		// inside the project directory. When run as installed product the "capture" directory
		// will be found inside the user data directory. Drag[en]gine Launchers will help you
		// find this directory easily.
		/*
		var Dragengine.Debugging.DebugElementClassInfo debugInfo = \
			Dragengine.Debugging.DebugElementClassInfo.new()
		debugInfo.print(Dragengine.Debugging.DebugElementClassInfo.FileWriterOut \
			.new("/capture/elementClassInfo.txt"), this.getElementClassList())
		*/
		
		startLoadGameWorld(StartGame.new(getWindowGameWorld(), "/content/worlds/hub.deworld"))
	end
	
	/**
	 * \brief Create behavior factories adding them to the factory list.
	 * 
	 * Behavior factories allow generic \ref BehaviorElementClass to be created using XML element
	 * class files (*.deeclass) where not only element class properties can be defined but
	 * also behaviors added. \ref GenericBehaviorElementClass uses the factories added here
	 * as initial list of allowed factories. See \ref BehaviorFactoryHelper#addAllFactories()
	 * for the list of factories added by default. Hence by default you can use
	 * "GenericBehaviorElement" as the jack of all trades class with access to all factories.
	 * 
	 * Using \ref GenericBehaviorElementClass is one possibility. Every \ref BehaviorElementClass
	 * can add supported factories in their constructor. This allows to fine tune for which
	 * element class which behavior factories are allowed to be used. If you use BehaviorElement
	 * classes fine tuned in this way it is recommended to either clear
	 * \ref #getBehaviorFactories() to turn \ref GenericBehaviorElementClass into a simple
	 * \ref BehaviorElementClass or you remove it as available class in
	 * \ref #createAndAddElementClasses().
	 */
	protected func void createAndAddBehaviorFactories()
		super.createAndAddBehaviorFactories()
		
		// We are using here two custom behaviors. Add them so they can be used
		var BehaviorFactoryList factories = getBehaviorFactories()
		factories.add(BehaviorChooseColors.Factory.new())
		factories.add(BehaviorInteractToggle.Factory.new())
		factories.add(BehaviorAICoward.Factory.new())
	end
	
	/**
	 * \brief Create element classes and add them to element class list.
	 * 
	 * Element classes list contains all element classes world files are allowed to be used.
	 * See \ref BaseGameApp#createAndAddElementClasses for the list of element classes added
	 * by default. Undesired element classes can be removed and custom ones added.
	 */
	protected func void createAndAddElementClasses()
		super.createAndAddElementClasses()
		
		// Add scripted element classes. These can be used by XML element classes below
		var ElementClassList eclist = getElementClassList()
		eclist.add(PlayerActorClass.new())
		eclist.add(CowardlyActorClass.new())
		eclist.add(ListenerFactoryExampleClass.new())
		eclist.add(StateMachineExampleClass.new())
		eclist.add(InteractionSpotExampleClass.new())
		eclist.add(CustomColorExampleClass.new())
		
		// Add XML element classes by recursively scanning directory for *.deeclass files.
		// These require scripted element classes as parent classes. Using *.deeclass
		// files you can easily add content with needing to write scripted classes.
		getLoaders().getElementClass().addXmlElementClasses(eclist, "/content/models", true)
		
		// You will see also the directories /content/materials and /content/skies.
		// These two directories are only automatically scanned by the IGDE Editor.
		// For games you do not have to specify them anywhere as they are loaded
		// by the individual element classes
	end
	
	/**
	 * Create and add custom commands.
	 */
	protected func void createAndAddCommands()
		super.createAndAddCommands()
		
		// Add custom commands. Once added the player can assign bindings to them
		var CommandManager cmgr = getCommandManager()
		cmgr.add(CommandMenu.new())
	end
	
	/**
	 * Set default bindings. These are used the first time the player runs the game.
	 */
	public func DefaultBindingHelper defaultBindings()
		var DefaultBindingHelper helper = super.defaultBindings()
		
		// Assign the escape keyboard key to the game menu command. For this use an
		// InputEventKey constant and the name of the command.
		// 
		// As a little side note. The super class assigns two keys to the quit game
		// command: Escape and Q. Hence by assigning Escape to our show game menu
		// command the Q key will still immediately quit the game
		helper.keyboardBindKeyCode(InputEventKey.escape, "showMenu")
		
		return helper
	end
	
	/**
	 * Clean up.
	 */
	public func void cleanUp()
		super.cleanUp()
	end
end
