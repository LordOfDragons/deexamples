namespace Example

pin Dragengine.Scenery


/**
 * Behavior allowing player to change custom colors.
 * 
 * Example behavior for allowing player to interact with an element to change custom
 * colors. Provides an interaction zone for the player actor to move to.
 */
class BehaviorChooseColors extends DefaultECBehavior
	/**
	 * Behavior factory.
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='BehaviorChooseColors'/>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "BehaviorChooseColors"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			
			var BehaviorChooseColors behavior = BehaviorChooseColors.new(eclass,\
				ECBehaviorInteraction.getBehaviorIn(eclass))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "chooseColors")
			
			return behavior
		end
	end
	
	/**
	 * Instance of behavior. This is used at run-time to access the functionality.
	 */
	public class Instance extends DefaultECBehaviorInstance
		/**
		 * Choose custom color interaction.
		 */
		class InteractionChooseCustomColor implements ECBehaviorInteraction.Interaction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func bool interact(ECBehaviorInteraction.Instance instance, Array parameters, BehaviorElement source)
				if pInstance.dialog == null
					pInstance.dialog = PlayerActionCustomColor.DialogEditColors.new(pInstance)
				end
				return true
			end
		end
		
		/**
		 * Choose custom color interaction finished query.
		 */
		class InteractionChooseCustomColorFinished implements ECBehaviorInteraction.Interaction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func bool interact(ECBehaviorInteraction.Instance instance, Array parameters, BehaviorElement source)
				if pInstance.dialog == null
					return true
				end
				
				// Check if dialog is still shown on the desktop. Closing the window removes
				// it from the desktop so we can check if the window still has a parent
				if pInstance.dialog.getParent() != null
					return false
				end
				
				pInstance.dialog.safeDispose()
				pInstance.dialog = null
				return true
			end
		end
		
		
		/** List of custom color behaviors in the order they should be displayed. */
		public var Array customColors
		
		/** Interaction spot instance. */
		public var ECBehaviorInteractionSpot.Instance interactionSpot
		
		/** Dialog. */
		public var PlayerActionCustomColor.DialogEditColors dialog
		
		
		/**
		 * Create instance. The behavior is used to look up and store required instances
		 */
		func new(BehaviorChooseColors behavior, BehaviorElement element) super(element)
			// Look up the instance and store it. Using instance() is fast
			interactionSpot = behavior.interactionSpot.instance(element)
			
			customColors = behavior.customColors.map(block ECBehaviorCustomColor each
				return each.instance(element)
			end)
			
			// Register "chooseCustomColor" interaction
			behavior.interaction.instance(element).setInteractionAt(\
				"chooseCustomColor", InteractionChooseCustomColor.new(this))
			behavior.interaction.instance(element).setInteractionAt(\
				"chooceCustomColor.finished", InteractionChooseCustomColorFinished.new(this))
		end
		 
		/**
		 * Overrides DefaultECBehaviorInstance.dispose(). As with
		 * BehaviorChooseColors.dispose() this is used to avoid leaking.
		 */
		func void dispose()
			customColors = null
			interactionSpot = null
			
			if dialog != null
				dialog.safeDispose()
				dialog = null
			end
			
			// Never forget the super call
			super.dispose()
		end
	end
	
	
	public var Array customColors
	public var ECBehaviorInteractionSpot interactionSpot
	public var ECBehaviorInteractPrompt prompt
	public var ECBehaviorInteraction interaction
	
	
	/**
	 * \brief Create behavior.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorInteraction interaction) super(eclass)
		this.interaction = interaction
		
		// Find all custom colors and store them. Another possibility is to add
		// an addCustomColor(ECbehaviorCustomColor) function to allow the user
		// to add the instances in the order he wants to. For this example though
		// we simply fetch all in the order they hayve been added
		this.customColors = ECBehaviorCustomColor.getAllBehaviorsIn(eclass)
		
		// Add the interaction spot. Set some basic parameters. Usually the element
		// class using this behavior sets the parameters to match the model used
		interactionSpot = ECBehaviorInteractionSpot.new(eclass, "chooseColors", "chooseColors.interactionSpot.")
		interactionSpot.getPosition().setVector(Vector.new(0, 0, 1))
		interactionSpot.getOrientation().setVector(Vector.new(0, 180, 0))
		interactionSpot.getLookAt().setVector(Vector.new())
		
		// Add an interact prompt telling the player he can use this object
		prompt = ECBehaviorInteractPrompt.new(eclass, "chooseColors.use", "chooseColors.interactPrompt(use)" )
		prompt.getVerb().setValue(UnicodeString.newFromUTF8("Choose Colors"))
		prompt.getImage().setPath("/content/images/interactChooseColors.png")
		
		// Add this behavior to the element class
		eclass.addBehavior(this)
	end
	
	/**
	 * Dispose of the behavior. This is used to break reference loops avoiding leaking.
	 * It is not required to clear all stored behaviors but doing so ensures you never
	 * end up with surprises.
	 */
	func void dispose()
		customColors = null
		interactionSpot = null
		prompt = null
		interaction = null
		
		// Never forget the super call
		super.dispose()
	end
	
	/**
	 * Create instance.
	 */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
