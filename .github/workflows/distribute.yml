name: Distribute

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      artifact:
        required: true
        type: string
      lfscache:
        required: false
        default: true
        type: boolean

jobs:
  distribute:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: ${{ !inputs.lfscache }}
        
      - name: Create LFS file hash list
        if: ${{ inputs.lfscache }}
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-objects-id

      - name: Restore LFS Cache
        uses: actions/cache@v4
        id: lfs-cache
        if: ${{ inputs.lfscache }}
        with:
          path: .git/lfs
          key: lfs-cache-${{ hashFiles('.lfs-objects-id') }}
          restore-keys: lfs-cache-

      - name: Git LFS Pull
        if: ${{ inputs.lfscache }}
        run: |
          git lfs pull 2>&1 | tee lfs.log
          if grep -q "error:" "lfs.log" ; then
            exit 1
          fi
      
      - name: Distribute AudioTest
        id: audiotest
        uses: LordOfDragons/build-delga@v2
        with:
          projectFile: 'audioTest/audioTest.degp'
          profile: 'Release'
          outputDir: 'deigde-output/audioTest'
      
      - name: Distribute GraphicsTest
        id: graphicstest
        uses: LordOfDragons/build-delga@v2
        with:
          projectFile: 'degraphicstest/DEGraphicsTest.degp'
          profile: 'Default'
          outputDir: 'deigde-output/degraphicstest'
      
      - name: Distribute DSTestProject
        id: dstestproject
        uses: LordOfDragons/build-delga@v2
        with:
          projectFile: 'dstestproject/dstestproject.degp'
          profile: 'Default'
          outputDir: 'deigde-output/dstestproject'
      
      - name: Distribute ExampleApp
        id: exampleapp
        uses: LordOfDragons/build-delga@v2
        with:
          projectFile: 'exampleApp/Example App.degp'
          profile: 'Default'
          outputDir: 'deigde-output/exampleApp'
      
      - name: Distribute ExampleVR
        id: examplevr
        uses: LordOfDragons/build-delga@v2
        with:
          projectFile: 'exampleVR/ExampleVR.degp'
          profile: 'Release'
          outputDir: 'deigde-output/exampleVR'
      
      - name: Distribute Network
        id: network
        uses: LordOfDragons/build-delga@v2
        with:
          projectFile: 'network/NetworkExample.degp'
          profile: 'Release'
          outputDir: 'deigde-output/network'
      
      - name: Distribute VideoPlayer
        id: videoplayer
        uses: LordOfDragons/build-delga@v2
        with:
          projectFile: 'videoplayer/Video Player.degp'
          profile: 'Default'
          outputDir: 'deigde-output/videoplayer'
        
      - name: Copy Artifacts
        run: |
          mkdir artifacts
          cp -a audioTest/distribute/DEAudioTest.delga artifacts
          cp -a degraphicstest/distribute/DEGraphicsTest.delga artifacts
          cp -a dstestproject/distribute/DSTestProject.delga artifacts
          cp -a exampleApp/distribute/DEExampleApp.delga artifacts
          cp -a exampleVR/distribute/ExampleVR.delga artifacts
          cp -a network/distribute/DENetworkExample.delga artifacts
          cp -a videoplayer/distribute/DEVideoPlayer.delga artifacts
        
      - name: Store DELGAs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ inputs.artifact }}
          path: |
            artifacts/*.delga
            deigde-output
